
Source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003730  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  0800383c  0800383c  0001383c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003878  08003878  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003878  08003878  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003878  08003878  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003878  08003878  00013878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800387c  0800387c  0001387c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  2000000c  0800388c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  0800388c  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000106c9  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025aa  00000000  00000000  000306fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  00032ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d68  00000000  00000000  00033b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cfe  00000000  00000000  00034870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010505  00000000  00000000  0004d56e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dbec  00000000  00000000  0005da73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eb65f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b10  00000000  00000000  000eb6b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003824 	.word	0x08003824

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003824 	.word	0x08003824

0800014c <__clear_cache>:
 800014c:	4770      	bx	lr
 800014e:	bf00      	nop

08000150 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t temp = 0;
uint8_t index_buffer = 0;
uint8_t buffer_flag = 0;
void HAL_UART_RxCpltCallback( UART_HandleTypeDef *huart ){
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	if( huart->Instance == USART2 ) {
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	4a13      	ldr	r2, [pc, #76]	; (80001ac <HAL_UART_RxCpltCallback+0x5c>)
 800015e:	4293      	cmp	r3, r2
 8000160:	d11f      	bne.n	80001a2 <HAL_UART_RxCpltCallback+0x52>
		HAL_UART_Transmit(&huart2 ,&temp , 1, 50);
 8000162:	2332      	movs	r3, #50	; 0x32
 8000164:	2201      	movs	r2, #1
 8000166:	4912      	ldr	r1, [pc, #72]	; (80001b0 <HAL_UART_RxCpltCallback+0x60>)
 8000168:	4812      	ldr	r0, [pc, #72]	; (80001b4 <HAL_UART_RxCpltCallback+0x64>)
 800016a:	f002 fd07 	bl	8002b7c <HAL_UART_Transmit>
		buffer[index_buffer++] = temp;
 800016e:	4b12      	ldr	r3, [pc, #72]	; (80001b8 <HAL_UART_RxCpltCallback+0x68>)
 8000170:	781b      	ldrb	r3, [r3, #0]
 8000172:	1c5a      	adds	r2, r3, #1
 8000174:	b2d1      	uxtb	r1, r2
 8000176:	4a10      	ldr	r2, [pc, #64]	; (80001b8 <HAL_UART_RxCpltCallback+0x68>)
 8000178:	7011      	strb	r1, [r2, #0]
 800017a:	461a      	mov	r2, r3
 800017c:	4b0c      	ldr	r3, [pc, #48]	; (80001b0 <HAL_UART_RxCpltCallback+0x60>)
 800017e:	7819      	ldrb	r1, [r3, #0]
 8000180:	4b0e      	ldr	r3, [pc, #56]	; (80001bc <HAL_UART_RxCpltCallback+0x6c>)
 8000182:	5499      	strb	r1, [r3, r2]
		if( index_buffer == 30) index_buffer = 0;
 8000184:	4b0c      	ldr	r3, [pc, #48]	; (80001b8 <HAL_UART_RxCpltCallback+0x68>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	2b1e      	cmp	r3, #30
 800018a:	d102      	bne.n	8000192 <HAL_UART_RxCpltCallback+0x42>
 800018c:	4b0a      	ldr	r3, [pc, #40]	; (80001b8 <HAL_UART_RxCpltCallback+0x68>)
 800018e:	2200      	movs	r2, #0
 8000190:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 8000192:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <HAL_UART_RxCpltCallback+0x70>)
 8000194:	2201      	movs	r2, #1
 8000196:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2 ,&temp , 1);
 8000198:	2201      	movs	r2, #1
 800019a:	4905      	ldr	r1, [pc, #20]	; (80001b0 <HAL_UART_RxCpltCallback+0x60>)
 800019c:	4805      	ldr	r0, [pc, #20]	; (80001b4 <HAL_UART_RxCpltCallback+0x64>)
 800019e:	f002 fd70 	bl	8002c82 <HAL_UART_Receive_IT>
	}
}
 80001a2:	bf00      	nop
 80001a4:	3708      	adds	r7, #8
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	40004400 	.word	0x40004400
 80001b0:	20000028 	.word	0x20000028
 80001b4:	20000264 	.word	0x20000264
 80001b8:	20000029 	.word	0x20000029
 80001bc:	20000168 	.word	0x20000168
 80001c0:	2000002a 	.word	0x2000002a

080001c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001c6:	b087      	sub	sp, #28
 80001c8:	af00      	add	r7, sp, #0
int main(void)
 80001ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80001ce:	617b      	str	r3, [r7, #20]
 80001d0:	1d3c      	adds	r4, r7, #4
 80001d2:	1d3d      	adds	r5, r7, #4
 80001d4:	4b1a      	ldr	r3, [pc, #104]	; (8000240 <main+0x7c>)
 80001d6:	4626      	mov	r6, r4
 80001d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001da:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80001de:	60a5      	str	r5, [r4, #8]
 80001e0:	4b18      	ldr	r3, [pc, #96]	; (8000244 <main+0x80>)
 80001e2:	60e3      	str	r3, [r4, #12]
 80001e4:	f104 0310 	add.w	r3, r4, #16
 80001e8:	4619      	mov	r1, r3
 80001ea:	4620      	mov	r0, r4
 80001ec:	f7ff ffae 	bl	800014c <__clear_cache>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f0:	f000 fdcc 	bl	8000d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f4:	f000 f83e 	bl	8000274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f8:	f000 f940 	bl	800047c <MX_GPIO_Init>
  MX_ADC1_Init();
 80001fc:	f000 f88a 	bl	8000314 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000200:	f000 f912 	bl	8000428 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000204:	f000 f8c4 	bl	8000390 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000208:	480f      	ldr	r0, [pc, #60]	; (8000248 <main+0x84>)
 800020a:	f002 f8cf 	bl	80023ac <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2 ,&temp , 1);
 800020e:	2201      	movs	r2, #1
 8000210:	490e      	ldr	r1, [pc, #56]	; (800024c <main+0x88>)
 8000212:	480f      	ldr	r0, [pc, #60]	; (8000250 <main+0x8c>)
 8000214:	f002 fd35 	bl	8002c82 <HAL_UART_Receive_IT>
  setTimer(300, 1);
 8000218:	2101      	movs	r1, #1
 800021a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800021e:	f000 fc51 	bl	8000ac4 <setTimer>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port , LED_RED_Pin);
  }
  void timerRun2Task(){
	  timerRun(2);
  }
  SCH_Init();
 8000222:	f000 f96c 	bl	80004fe <SCH_Init>
  SCH_Add_Task(toggleLed,0,500);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	f043 0301 	orr.w	r3, r3, #1
 800022c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f000 f998 	bl	8000568 <SCH_Add_Task>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000238:	f000 fc00 	bl	8000a3c <SCH_Dispatch_Tasks>
 800023c:	e7fc      	b.n	8000238 <main+0x74>
 800023e:	bf00      	nop
 8000240:	0800383c 	.word	0x0800383c
 8000244:	08000255 	.word	0x08000255
 8000248:	2000021c 	.word	0x2000021c
 800024c:	20000028 	.word	0x20000028
 8000250:	20000264 	.word	0x20000264

08000254 <toggleLed.7542>:
  void toggleLed(){
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	f8c7 c004 	str.w	ip, [r7, #4]
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port , LED_RED_Pin);
 800025e:	2120      	movs	r1, #32
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <toggleLed.7542+0x1c>)
 8000262:	f001 fb59 	bl	8001918 <HAL_GPIO_TogglePin>
  }
 8000266:	bf00      	nop
 8000268:	3708      	adds	r7, #8
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40010800 	.word	0x40010800

08000274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b094      	sub	sp, #80	; 0x50
 8000278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800027e:	2228      	movs	r2, #40	; 0x28
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f003 fac6 	bl	8003814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000288:	f107 0314 	add.w	r3, r7, #20
 800028c:	2200      	movs	r2, #0
 800028e:	601a      	str	r2, [r3, #0]
 8000290:	605a      	str	r2, [r3, #4]
 8000292:	609a      	str	r2, [r3, #8]
 8000294:	60da      	str	r2, [r3, #12]
 8000296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a4:	2302      	movs	r3, #2
 80002a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a8:	2301      	movs	r3, #1
 80002aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ac:	2310      	movs	r3, #16
 80002ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b0:	2300      	movs	r3, #0
 80002b2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002b8:	4618      	mov	r0, r3
 80002ba:	f001 fb63 	bl	8001984 <HAL_RCC_OscConfig>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80002c4:	f000 f916 	bl	80004f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c8:	230f      	movs	r3, #15
 80002ca:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002cc:	2300      	movs	r3, #0
 80002ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002dc:	f107 0314 	add.w	r3, r7, #20
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f001 fdce 	bl	8001e84 <HAL_RCC_ClockConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80002ee:	f000 f901 	bl	80004f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002f2:	2302      	movs	r3, #2
 80002f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	4618      	mov	r0, r3
 80002fe:	f001 ff4f 	bl	80021a0 <HAL_RCCEx_PeriphCLKConfig>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000308:	f000 f8f4 	bl	80004f4 <Error_Handler>
  }
}
 800030c:	bf00      	nop
 800030e:	3750      	adds	r7, #80	; 0x50
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}

08000314 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000324:	4b18      	ldr	r3, [pc, #96]	; (8000388 <MX_ADC1_Init+0x74>)
 8000326:	4a19      	ldr	r2, [pc, #100]	; (800038c <MX_ADC1_Init+0x78>)
 8000328:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <MX_ADC1_Init+0x74>)
 800032c:	2200      	movs	r2, #0
 800032e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000330:	4b15      	ldr	r3, [pc, #84]	; (8000388 <MX_ADC1_Init+0x74>)
 8000332:	2201      	movs	r2, #1
 8000334:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <MX_ADC1_Init+0x74>)
 8000338:	2200      	movs	r2, #0
 800033a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800033c:	4b12      	ldr	r3, [pc, #72]	; (8000388 <MX_ADC1_Init+0x74>)
 800033e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000342:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000344:	4b10      	ldr	r3, [pc, #64]	; (8000388 <MX_ADC1_Init+0x74>)
 8000346:	2200      	movs	r2, #0
 8000348:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800034a:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <MX_ADC1_Init+0x74>)
 800034c:	2201      	movs	r2, #1
 800034e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000350:	480d      	ldr	r0, [pc, #52]	; (8000388 <MX_ADC1_Init+0x74>)
 8000352:	f000 fd7d 	bl	8000e50 <HAL_ADC_Init>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800035c:	f000 f8ca 	bl	80004f4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000360:	2300      	movs	r3, #0
 8000362:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000364:	2301      	movs	r3, #1
 8000366:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000368:	2300      	movs	r3, #0
 800036a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	4619      	mov	r1, r3
 8000370:	4805      	ldr	r0, [pc, #20]	; (8000388 <MX_ADC1_Init+0x74>)
 8000372:	f000 fe45 	bl	8001000 <HAL_ADC_ConfigChannel>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800037c:	f000 f8ba 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000380:	bf00      	nop
 8000382:	3710      	adds	r7, #16
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	200001ec 	.word	0x200001ec
 800038c:	40012400 	.word	0x40012400

08000390 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b086      	sub	sp, #24
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000396:	f107 0308 	add.w	r3, r7, #8
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003a4:	463b      	mov	r3, r7
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003ac:	4b1d      	ldr	r3, [pc, #116]	; (8000424 <MX_TIM2_Init+0x94>)
 80003ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80003b4:	4b1b      	ldr	r3, [pc, #108]	; (8000424 <MX_TIM2_Init+0x94>)
 80003b6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80003ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003bc:	4b19      	ldr	r3, [pc, #100]	; (8000424 <MX_TIM2_Init+0x94>)
 80003be:	2200      	movs	r2, #0
 80003c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80003c2:	4b18      	ldr	r3, [pc, #96]	; (8000424 <MX_TIM2_Init+0x94>)
 80003c4:	2209      	movs	r2, #9
 80003c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003c8:	4b16      	ldr	r3, [pc, #88]	; (8000424 <MX_TIM2_Init+0x94>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ce:	4b15      	ldr	r3, [pc, #84]	; (8000424 <MX_TIM2_Init+0x94>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003d4:	4813      	ldr	r0, [pc, #76]	; (8000424 <MX_TIM2_Init+0x94>)
 80003d6:	f001 ff99 	bl	800230c <HAL_TIM_Base_Init>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80003e0:	f000 f888 	bl	80004f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003ea:	f107 0308 	add.w	r3, r7, #8
 80003ee:	4619      	mov	r1, r3
 80003f0:	480c      	ldr	r0, [pc, #48]	; (8000424 <MX_TIM2_Init+0x94>)
 80003f2:	f002 f92f 	bl	8002654 <HAL_TIM_ConfigClockSource>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80003fc:	f000 f87a 	bl	80004f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000400:	2300      	movs	r3, #0
 8000402:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000404:	2300      	movs	r3, #0
 8000406:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000408:	463b      	mov	r3, r7
 800040a:	4619      	mov	r1, r3
 800040c:	4805      	ldr	r0, [pc, #20]	; (8000424 <MX_TIM2_Init+0x94>)
 800040e:	f002 fafb 	bl	8002a08 <HAL_TIMEx_MasterConfigSynchronization>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000418:	f000 f86c 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800041c:	bf00      	nop
 800041e:	3718      	adds	r7, #24
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	2000021c 	.word	0x2000021c

08000428 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800042c:	4b11      	ldr	r3, [pc, #68]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 800042e:	4a12      	ldr	r2, [pc, #72]	; (8000478 <MX_USART2_UART_Init+0x50>)
 8000430:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000432:	4b10      	ldr	r3, [pc, #64]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 8000434:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000438:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 800043c:	2200      	movs	r2, #0
 800043e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000440:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 8000442:	2200      	movs	r2, #0
 8000444:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000446:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 8000448:	2200      	movs	r2, #0
 800044a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800044c:	4b09      	ldr	r3, [pc, #36]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 800044e:	220c      	movs	r2, #12
 8000450:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 8000454:	2200      	movs	r2, #0
 8000456:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 800045a:	2200      	movs	r2, #0
 800045c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800045e:	4805      	ldr	r0, [pc, #20]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 8000460:	f002 fb3c 	bl	8002adc <HAL_UART_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800046a:	f000 f843 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	20000264 	.word	0x20000264
 8000478:	40004400 	.word	0x40004400

0800047c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000482:	f107 0308 	add.w	r3, r7, #8
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000490:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <MX_GPIO_Init+0x5c>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a10      	ldr	r2, [pc, #64]	; (80004d8 <MX_GPIO_Init+0x5c>)
 8000496:	f043 0304 	orr.w	r3, r3, #4
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <MX_GPIO_Init+0x5c>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0304 	and.w	r3, r3, #4
 80004a4:	607b      	str	r3, [r7, #4]
 80004a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2120      	movs	r1, #32
 80004ac:	480b      	ldr	r0, [pc, #44]	; (80004dc <MX_GPIO_Init+0x60>)
 80004ae:	f001 fa1b 	bl	80018e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80004b2:	2320      	movs	r3, #32
 80004b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b6:	2301      	movs	r3, #1
 80004b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ba:	2300      	movs	r3, #0
 80004bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004be:	2302      	movs	r3, #2
 80004c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80004c2:	f107 0308 	add.w	r3, r7, #8
 80004c6:	4619      	mov	r1, r3
 80004c8:	4804      	ldr	r0, [pc, #16]	; (80004dc <MX_GPIO_Init+0x60>)
 80004ca:	f001 f893 	bl	80015f4 <HAL_GPIO_Init>

}
 80004ce:	bf00      	nop
 80004d0:	3718      	adds	r7, #24
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40021000 	.word	0x40021000
 80004dc:	40010800 	.word	0x40010800

080004e0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80004e8:	f000 f81e 	bl	8000528 <SCH_Update>

};
 80004ec:	bf00      	nop
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f8:	b672      	cpsid	i
}
 80004fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004fc:	e7fe      	b.n	80004fc <Error_Handler+0x8>

080004fe <SCH_Init>:
static uint32_t newTaskID = 0;

static uint32_t Get_New_Task_ID(void);
unsigned char Error_code_G = 0;

void SCH_Init(void){
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
    unsigned char i;
    for (i = 0; i < SCH_MAX_TASKS; i++) {
 8000504:	2300      	movs	r3, #0
 8000506:	71fb      	strb	r3, [r7, #7]
 8000508:	e006      	b.n	8000518 <SCH_Init+0x1a>
        SCH_Delete_Task(i);
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	4618      	mov	r0, r3
 800050e:	f000 f9a1 	bl	8000854 <SCH_Delete_Task>
    for (i = 0; i < SCH_MAX_TASKS; i++) {
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	3301      	adds	r3, #1
 8000516:	71fb      	strb	r3, [r7, #7]
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	2b09      	cmp	r3, #9
 800051c:	d9f5      	bls.n	800050a <SCH_Init+0xc>
    }
}
 800051e:	bf00      	nop
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <SCH_Update>:

void SCH_Update(void){
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
	//CHECK ALL TASK 'S DELAY TIME. IF RUN OUT, RUN THAT TASK
	if (SCH_tasks_G[0].pTask && SCH_tasks_G[0].RunMe == 0) {
 800052c:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <SCH_Update+0x3c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d013      	beq.n	800055c <SCH_Update+0x34>
 8000534:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <SCH_Update+0x3c>)
 8000536:	7b1b      	ldrb	r3, [r3, #12]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d10f      	bne.n	800055c <SCH_Update+0x34>
		if(SCH_tasks_G[0].Delay > 0){
 800053c:	4b09      	ldr	r3, [pc, #36]	; (8000564 <SCH_Update+0x3c>)
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d004      	beq.n	800054e <SCH_Update+0x26>
			SCH_tasks_G[0].Delay = SCH_tasks_G[0].Delay - 1;
 8000544:	4b07      	ldr	r3, [pc, #28]	; (8000564 <SCH_Update+0x3c>)
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	3b01      	subs	r3, #1
 800054a:	4a06      	ldr	r2, [pc, #24]	; (8000564 <SCH_Update+0x3c>)
 800054c:	6053      	str	r3, [r2, #4]
		}
		if (SCH_tasks_G[0].Delay == 0) {
 800054e:	4b05      	ldr	r3, [pc, #20]	; (8000564 <SCH_Update+0x3c>)
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d102      	bne.n	800055c <SCH_Update+0x34>
			SCH_tasks_G[0].RunMe = 1;
 8000556:	4b03      	ldr	r3, [pc, #12]	; (8000564 <SCH_Update+0x3c>)
 8000558:	2201      	movs	r2, #1
 800055a:	731a      	strb	r2, [r3, #12]
		}
	}
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	2000002c 	.word	0x2000002c

08000568 <SCH_Add_Task>:
uint32_t SCH_Add_Task(void (* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b089      	sub	sp, #36	; 0x24
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
	uint8_t newTaskIndex = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	77fb      	strb	r3, [r7, #31]
	uint32_t sumDelay = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	61bb      	str	r3, [r7, #24]
	uint32_t newDelay = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	613b      	str	r3, [r7, #16]

	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex++){
 8000580:	2300      	movs	r3, #0
 8000582:	77fb      	strb	r3, [r7, #31]
 8000584:	e152      	b.n	800082c <SCH_Add_Task+0x2c4>
		sumDelay = sumDelay + SCH_tasks_G[newTaskIndex].Delay;
 8000586:	7ffa      	ldrb	r2, [r7, #31]
 8000588:	49b1      	ldr	r1, [pc, #708]	; (8000850 <SCH_Add_Task+0x2e8>)
 800058a:	4613      	mov	r3, r2
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	4413      	add	r3, r2
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	440b      	add	r3, r1
 8000594:	3304      	adds	r3, #4
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	69ba      	ldr	r2, [r7, #24]
 800059a:	4413      	add	r3, r2
 800059c:	61bb      	str	r3, [r7, #24]
		if(sumDelay > DELAY){
 800059e:	69ba      	ldr	r2, [r7, #24]
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	f240 80e0 	bls.w	8000768 <SCH_Add_Task+0x200>
			//ADD NEW TASK BEFORE THE CURRENT TASK
			newDelay = DELAY - (sumDelay - SCH_tasks_G[newTaskIndex].Delay);
 80005a8:	7ffa      	ldrb	r2, [r7, #31]
 80005aa:	49a9      	ldr	r1, [pc, #676]	; (8000850 <SCH_Add_Task+0x2e8>)
 80005ac:	4613      	mov	r3, r2
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	4413      	add	r3, r2
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	440b      	add	r3, r1
 80005b6:	3304      	adds	r3, #4
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	69bb      	ldr	r3, [r7, #24]
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	68ba      	ldr	r2, [r7, #8]
 80005c0:	4413      	add	r3, r2
 80005c2:	613b      	str	r3, [r7, #16]
			SCH_tasks_G[newTaskIndex].Delay = sumDelay - DELAY;
 80005c4:	7ffa      	ldrb	r2, [r7, #31]
 80005c6:	69b9      	ldr	r1, [r7, #24]
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	48a0      	ldr	r0, [pc, #640]	; (8000850 <SCH_Add_Task+0x2e8>)
 80005ce:	4613      	mov	r3, r2
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	4413      	add	r3, r2
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	4403      	add	r3, r0
 80005d8:	3304      	adds	r3, #4
 80005da:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i--){
 80005dc:	2309      	movs	r3, #9
 80005de:	75fb      	strb	r3, [r7, #23]
 80005e0:	e06b      	b.n	80006ba <SCH_Add_Task+0x152>
				if(SCH_tasks_G[i - 1].pTask != 0)
 80005e2:	7dfb      	ldrb	r3, [r7, #23]
 80005e4:	1e5a      	subs	r2, r3, #1
 80005e6:	499a      	ldr	r1, [pc, #616]	; (8000850 <SCH_Add_Task+0x2e8>)
 80005e8:	4613      	mov	r3, r2
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	4413      	add	r3, r2
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	440b      	add	r3, r1
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d05d      	beq.n	80006b4 <SCH_Add_Task+0x14c>
				{
					SCH_tasks_G[i].pTask = SCH_tasks_G[i - 1].pTask;
 80005f8:	7dfb      	ldrb	r3, [r7, #23]
 80005fa:	1e59      	subs	r1, r3, #1
 80005fc:	7dfa      	ldrb	r2, [r7, #23]
 80005fe:	4894      	ldr	r0, [pc, #592]	; (8000850 <SCH_Add_Task+0x2e8>)
 8000600:	460b      	mov	r3, r1
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	440b      	add	r3, r1
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	4403      	add	r3, r0
 800060a:	6819      	ldr	r1, [r3, #0]
 800060c:	4890      	ldr	r0, [pc, #576]	; (8000850 <SCH_Add_Task+0x2e8>)
 800060e:	4613      	mov	r3, r2
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	4413      	add	r3, r2
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	4403      	add	r3, r0
 8000618:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[i].Period = SCH_tasks_G[i - 1].Period;
 800061a:	7dfb      	ldrb	r3, [r7, #23]
 800061c:	1e59      	subs	r1, r3, #1
 800061e:	7dfa      	ldrb	r2, [r7, #23]
 8000620:	488b      	ldr	r0, [pc, #556]	; (8000850 <SCH_Add_Task+0x2e8>)
 8000622:	460b      	mov	r3, r1
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	440b      	add	r3, r1
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	4403      	add	r3, r0
 800062c:	3308      	adds	r3, #8
 800062e:	6819      	ldr	r1, [r3, #0]
 8000630:	4887      	ldr	r0, [pc, #540]	; (8000850 <SCH_Add_Task+0x2e8>)
 8000632:	4613      	mov	r3, r2
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	4413      	add	r3, r2
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	4403      	add	r3, r0
 800063c:	3308      	adds	r3, #8
 800063e:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[i].Delay = SCH_tasks_G[i - 1].Delay;
 8000640:	7dfb      	ldrb	r3, [r7, #23]
 8000642:	1e59      	subs	r1, r3, #1
 8000644:	7dfa      	ldrb	r2, [r7, #23]
 8000646:	4882      	ldr	r0, [pc, #520]	; (8000850 <SCH_Add_Task+0x2e8>)
 8000648:	460b      	mov	r3, r1
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	440b      	add	r3, r1
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	4403      	add	r3, r0
 8000652:	3304      	adds	r3, #4
 8000654:	6819      	ldr	r1, [r3, #0]
 8000656:	487e      	ldr	r0, [pc, #504]	; (8000850 <SCH_Add_Task+0x2e8>)
 8000658:	4613      	mov	r3, r2
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	4413      	add	r3, r2
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	4403      	add	r3, r0
 8000662:	3304      	adds	r3, #4
 8000664:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[i].RunMe = SCH_tasks_G[i - 1].RunMe;
 8000666:	7dfb      	ldrb	r3, [r7, #23]
 8000668:	1e59      	subs	r1, r3, #1
 800066a:	7dfa      	ldrb	r2, [r7, #23]
 800066c:	4878      	ldr	r0, [pc, #480]	; (8000850 <SCH_Add_Task+0x2e8>)
 800066e:	460b      	mov	r3, r1
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	440b      	add	r3, r1
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	4403      	add	r3, r0
 8000678:	330c      	adds	r3, #12
 800067a:	7818      	ldrb	r0, [r3, #0]
 800067c:	4974      	ldr	r1, [pc, #464]	; (8000850 <SCH_Add_Task+0x2e8>)
 800067e:	4613      	mov	r3, r2
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	4413      	add	r3, r2
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	440b      	add	r3, r1
 8000688:	330c      	adds	r3, #12
 800068a:	4602      	mov	r2, r0
 800068c:	701a      	strb	r2, [r3, #0]
					SCH_tasks_G[i].TaskID = SCH_tasks_G[i - 1].TaskID;
 800068e:	7dfb      	ldrb	r3, [r7, #23]
 8000690:	1e59      	subs	r1, r3, #1
 8000692:	7dfa      	ldrb	r2, [r7, #23]
 8000694:	486e      	ldr	r0, [pc, #440]	; (8000850 <SCH_Add_Task+0x2e8>)
 8000696:	460b      	mov	r3, r1
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	440b      	add	r3, r1
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	4403      	add	r3, r0
 80006a0:	3310      	adds	r3, #16
 80006a2:	6819      	ldr	r1, [r3, #0]
 80006a4:	486a      	ldr	r0, [pc, #424]	; (8000850 <SCH_Add_Task+0x2e8>)
 80006a6:	4613      	mov	r3, r2
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	4413      	add	r3, r2
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	4403      	add	r3, r0
 80006b0:	3310      	adds	r3, #16
 80006b2:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i--){
 80006b4:	7dfb      	ldrb	r3, [r7, #23]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	75fb      	strb	r3, [r7, #23]
 80006ba:	7dfa      	ldrb	r2, [r7, #23]
 80006bc:	7ffb      	ldrb	r3, [r7, #31]
 80006be:	429a      	cmp	r2, r3
 80006c0:	d88f      	bhi.n	80005e2 <SCH_Add_Task+0x7a>
				}
			}
			// insert the new task
			SCH_tasks_G[newTaskIndex].pTask = pFunction;
 80006c2:	7ffa      	ldrb	r2, [r7, #31]
 80006c4:	4962      	ldr	r1, [pc, #392]	; (8000850 <SCH_Add_Task+0x2e8>)
 80006c6:	4613      	mov	r3, r2
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	4413      	add	r3, r2
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	440b      	add	r3, r1
 80006d0:	68fa      	ldr	r2, [r7, #12]
 80006d2:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Delay = newDelay;
 80006d4:	7ffa      	ldrb	r2, [r7, #31]
 80006d6:	495e      	ldr	r1, [pc, #376]	; (8000850 <SCH_Add_Task+0x2e8>)
 80006d8:	4613      	mov	r3, r2
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	4413      	add	r3, r2
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	440b      	add	r3, r1
 80006e2:	3304      	adds	r3, #4
 80006e4:	693a      	ldr	r2, [r7, #16]
 80006e6:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Period = PERIOD;
 80006e8:	7ffa      	ldrb	r2, [r7, #31]
 80006ea:	4959      	ldr	r1, [pc, #356]	; (8000850 <SCH_Add_Task+0x2e8>)
 80006ec:	4613      	mov	r3, r2
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	4413      	add	r3, r2
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	440b      	add	r3, r1
 80006f6:	3308      	adds	r3, #8
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	601a      	str	r2, [r3, #0]
			if(SCH_tasks_G[newTaskIndex].Delay == 0){
 80006fc:	7ffa      	ldrb	r2, [r7, #31]
 80006fe:	4954      	ldr	r1, [pc, #336]	; (8000850 <SCH_Add_Task+0x2e8>)
 8000700:	4613      	mov	r3, r2
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	4413      	add	r3, r2
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	440b      	add	r3, r1
 800070a:	3304      	adds	r3, #4
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d10a      	bne.n	8000728 <SCH_Add_Task+0x1c0>
				SCH_tasks_G[newTaskIndex].RunMe = 1;
 8000712:	7ffa      	ldrb	r2, [r7, #31]
 8000714:	494e      	ldr	r1, [pc, #312]	; (8000850 <SCH_Add_Task+0x2e8>)
 8000716:	4613      	mov	r3, r2
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	4413      	add	r3, r2
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	440b      	add	r3, r1
 8000720:	330c      	adds	r3, #12
 8000722:	2201      	movs	r2, #1
 8000724:	701a      	strb	r2, [r3, #0]
 8000726:	e009      	b.n	800073c <SCH_Add_Task+0x1d4>
			} else {
				SCH_tasks_G[newTaskIndex].RunMe = 0;
 8000728:	7ffa      	ldrb	r2, [r7, #31]
 800072a:	4949      	ldr	r1, [pc, #292]	; (8000850 <SCH_Add_Task+0x2e8>)
 800072c:	4613      	mov	r3, r2
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	4413      	add	r3, r2
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	440b      	add	r3, r1
 8000736:	330c      	adds	r3, #12
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
			}
			SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 800073c:	7ffc      	ldrb	r4, [r7, #31]
 800073e:	f000 f9a9 	bl	8000a94 <Get_New_Task_ID>
 8000742:	4602      	mov	r2, r0
 8000744:	4942      	ldr	r1, [pc, #264]	; (8000850 <SCH_Add_Task+0x2e8>)
 8000746:	4623      	mov	r3, r4
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	4423      	add	r3, r4
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	440b      	add	r3, r1
 8000750:	3310      	adds	r3, #16
 8000752:	601a      	str	r2, [r3, #0]
			return SCH_tasks_G[newTaskIndex].TaskID;
 8000754:	7ffa      	ldrb	r2, [r7, #31]
 8000756:	493e      	ldr	r1, [pc, #248]	; (8000850 <SCH_Add_Task+0x2e8>)
 8000758:	4613      	mov	r3, r2
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	4413      	add	r3, r2
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	440b      	add	r3, r1
 8000762:	3310      	adds	r3, #16
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	e06e      	b.n	8000846 <SCH_Add_Task+0x2de>
		} else {
			// One an empty slot is found, the new task is added there with the remaning delay
			if(SCH_tasks_G[newTaskIndex].pTask == 0x0000){
 8000768:	7ffa      	ldrb	r2, [r7, #31]
 800076a:	4939      	ldr	r1, [pc, #228]	; (8000850 <SCH_Add_Task+0x2e8>)
 800076c:	4613      	mov	r3, r2
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	4413      	add	r3, r2
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	440b      	add	r3, r1
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d154      	bne.n	8000826 <SCH_Add_Task+0x2be>
				SCH_tasks_G[newTaskIndex].pTask = pFunction;
 800077c:	7ffa      	ldrb	r2, [r7, #31]
 800077e:	4934      	ldr	r1, [pc, #208]	; (8000850 <SCH_Add_Task+0x2e8>)
 8000780:	4613      	mov	r3, r2
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	4413      	add	r3, r2
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	440b      	add	r3, r1
 800078a:	68fa      	ldr	r2, [r7, #12]
 800078c:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[newTaskIndex].Delay = DELAY - sumDelay;
 800078e:	7ffa      	ldrb	r2, [r7, #31]
 8000790:	68b9      	ldr	r1, [r7, #8]
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	1ac9      	subs	r1, r1, r3
 8000796:	482e      	ldr	r0, [pc, #184]	; (8000850 <SCH_Add_Task+0x2e8>)
 8000798:	4613      	mov	r3, r2
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4413      	add	r3, r2
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	4403      	add	r3, r0
 80007a2:	3304      	adds	r3, #4
 80007a4:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[newTaskIndex].Period = PERIOD;
 80007a6:	7ffa      	ldrb	r2, [r7, #31]
 80007a8:	4929      	ldr	r1, [pc, #164]	; (8000850 <SCH_Add_Task+0x2e8>)
 80007aa:	4613      	mov	r3, r2
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	4413      	add	r3, r2
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	440b      	add	r3, r1
 80007b4:	3308      	adds	r3, #8
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	601a      	str	r2, [r3, #0]
				if(SCH_tasks_G[newTaskIndex].Delay == 0){
 80007ba:	7ffa      	ldrb	r2, [r7, #31]
 80007bc:	4924      	ldr	r1, [pc, #144]	; (8000850 <SCH_Add_Task+0x2e8>)
 80007be:	4613      	mov	r3, r2
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	4413      	add	r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	440b      	add	r3, r1
 80007c8:	3304      	adds	r3, #4
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d10a      	bne.n	80007e6 <SCH_Add_Task+0x27e>
					SCH_tasks_G[newTaskIndex].RunMe = 1;
 80007d0:	7ffa      	ldrb	r2, [r7, #31]
 80007d2:	491f      	ldr	r1, [pc, #124]	; (8000850 <SCH_Add_Task+0x2e8>)
 80007d4:	4613      	mov	r3, r2
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	4413      	add	r3, r2
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	440b      	add	r3, r1
 80007de:	330c      	adds	r3, #12
 80007e0:	2201      	movs	r2, #1
 80007e2:	701a      	strb	r2, [r3, #0]
 80007e4:	e009      	b.n	80007fa <SCH_Add_Task+0x292>
				} else {
					SCH_tasks_G[newTaskIndex].RunMe = 0;
 80007e6:	7ffa      	ldrb	r2, [r7, #31]
 80007e8:	4919      	ldr	r1, [pc, #100]	; (8000850 <SCH_Add_Task+0x2e8>)
 80007ea:	4613      	mov	r3, r2
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	4413      	add	r3, r2
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	440b      	add	r3, r1
 80007f4:	330c      	adds	r3, #12
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
				}
				SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 80007fa:	7ffc      	ldrb	r4, [r7, #31]
 80007fc:	f000 f94a 	bl	8000a94 <Get_New_Task_ID>
 8000800:	4602      	mov	r2, r0
 8000802:	4913      	ldr	r1, [pc, #76]	; (8000850 <SCH_Add_Task+0x2e8>)
 8000804:	4623      	mov	r3, r4
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	4423      	add	r3, r4
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	440b      	add	r3, r1
 800080e:	3310      	adds	r3, #16
 8000810:	601a      	str	r2, [r3, #0]
				return SCH_tasks_G[newTaskIndex].TaskID;
 8000812:	7ffa      	ldrb	r2, [r7, #31]
 8000814:	490e      	ldr	r1, [pc, #56]	; (8000850 <SCH_Add_Task+0x2e8>)
 8000816:	4613      	mov	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4413      	add	r3, r2
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	440b      	add	r3, r1
 8000820:	3310      	adds	r3, #16
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	e00f      	b.n	8000846 <SCH_Add_Task+0x2de>
	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex++){
 8000826:	7ffb      	ldrb	r3, [r7, #31]
 8000828:	3301      	adds	r3, #1
 800082a:	77fb      	strb	r3, [r7, #31]
 800082c:	7ffb      	ldrb	r3, [r7, #31]
 800082e:	2b09      	cmp	r3, #9
 8000830:	f67f aea9 	bls.w	8000586 <SCH_Add_Task+0x1e>
			}
		}
	}
	return SCH_tasks_G[newTaskIndex].TaskID;
 8000834:	7ffa      	ldrb	r2, [r7, #31]
 8000836:	4906      	ldr	r1, [pc, #24]	; (8000850 <SCH_Add_Task+0x2e8>)
 8000838:	4613      	mov	r3, r2
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4413      	add	r3, r2
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	440b      	add	r3, r1
 8000842:	3310      	adds	r3, #16
 8000844:	681b      	ldr	r3, [r3, #0]
}
 8000846:	4618      	mov	r0, r3
 8000848:	3724      	adds	r7, #36	; 0x24
 800084a:	46bd      	mov	sp, r7
 800084c:	bd90      	pop	{r4, r7, pc}
 800084e:	bf00      	nop
 8000850:	2000002c 	.word	0x2000002c

08000854 <SCH_Delete_Task>:


uint8_t SCH_Delete_Task(uint32_t taskID){
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	uint8_t Return_code  = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	737b      	strb	r3, [r7, #13]
	uint8_t taskIndex;
	uint8_t j;
	if(taskID != NO_TASK_ID){
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2b00      	cmp	r3, #0
 8000864:	f000 80e2 	beq.w	8000a2c <SCH_Delete_Task+0x1d8>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex++){
 8000868:	2300      	movs	r3, #0
 800086a:	73fb      	strb	r3, [r7, #15]
 800086c:	e0da      	b.n	8000a24 <SCH_Delete_Task+0x1d0>
			// Searching task for delete
			if(SCH_tasks_G[taskIndex].TaskID == taskID){
 800086e:	7bfa      	ldrb	r2, [r7, #15]
 8000870:	4971      	ldr	r1, [pc, #452]	; (8000a38 <SCH_Delete_Task+0x1e4>)
 8000872:	4613      	mov	r3, r2
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	4413      	add	r3, r2
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	440b      	add	r3, r1
 800087c:	3310      	adds	r3, #16
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	429a      	cmp	r2, r3
 8000884:	f040 80cb 	bne.w	8000a1e <SCH_Delete_Task+0x1ca>
				Return_code = 1;
 8000888:	2301      	movs	r3, #1
 800088a:	737b      	strb	r3, [r7, #13]
				if(taskIndex != 0 && taskIndex < SCH_MAX_TASKS - 1){
 800088c:	7bfb      	ldrb	r3, [r7, #15]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d02b      	beq.n	80008ea <SCH_Delete_Task+0x96>
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	2b08      	cmp	r3, #8
 8000896:	d828      	bhi.n	80008ea <SCH_Delete_Task+0x96>
					if(SCH_tasks_G[taskIndex+1].pTask != 0x0000){
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	1c5a      	adds	r2, r3, #1
 800089c:	4966      	ldr	r1, [pc, #408]	; (8000a38 <SCH_Delete_Task+0x1e4>)
 800089e:	4613      	mov	r3, r2
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	4413      	add	r3, r2
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	440b      	add	r3, r1
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d01d      	beq.n	80008ea <SCH_Delete_Task+0x96>
						SCH_tasks_G[taskIndex+1].Delay += SCH_tasks_G[taskIndex].Delay;
 80008ae:	7bfb      	ldrb	r3, [r7, #15]
 80008b0:	1c5a      	adds	r2, r3, #1
 80008b2:	4961      	ldr	r1, [pc, #388]	; (8000a38 <SCH_Delete_Task+0x1e4>)
 80008b4:	4613      	mov	r3, r2
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	4413      	add	r3, r2
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	440b      	add	r3, r1
 80008be:	3304      	adds	r3, #4
 80008c0:	6819      	ldr	r1, [r3, #0]
 80008c2:	7bfa      	ldrb	r2, [r7, #15]
 80008c4:	485c      	ldr	r0, [pc, #368]	; (8000a38 <SCH_Delete_Task+0x1e4>)
 80008c6:	4613      	mov	r3, r2
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	4413      	add	r3, r2
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	4403      	add	r3, r0
 80008d0:	3304      	adds	r3, #4
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	7bfa      	ldrb	r2, [r7, #15]
 80008d6:	3201      	adds	r2, #1
 80008d8:	4419      	add	r1, r3
 80008da:	4857      	ldr	r0, [pc, #348]	; (8000a38 <SCH_Delete_Task+0x1e4>)
 80008dc:	4613      	mov	r3, r2
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	4413      	add	r3, r2
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	4403      	add	r3, r0
 80008e6:	3304      	adds	r3, #4
 80008e8:	6019      	str	r1, [r3, #0]
					}
				}
				// after delete the task, shift the array
				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j++){
 80008ea:	7bfb      	ldrb	r3, [r7, #15]
 80008ec:	73bb      	strb	r3, [r7, #14]
 80008ee:	e060      	b.n	80009b2 <SCH_Delete_Task+0x15e>
					SCH_tasks_G[j].pTask = SCH_tasks_G[j+1].pTask;
 80008f0:	7bbb      	ldrb	r3, [r7, #14]
 80008f2:	1c59      	adds	r1, r3, #1
 80008f4:	7bba      	ldrb	r2, [r7, #14]
 80008f6:	4850      	ldr	r0, [pc, #320]	; (8000a38 <SCH_Delete_Task+0x1e4>)
 80008f8:	460b      	mov	r3, r1
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	440b      	add	r3, r1
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	4403      	add	r3, r0
 8000902:	6819      	ldr	r1, [r3, #0]
 8000904:	484c      	ldr	r0, [pc, #304]	; (8000a38 <SCH_Delete_Task+0x1e4>)
 8000906:	4613      	mov	r3, r2
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	4413      	add	r3, r2
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	4403      	add	r3, r0
 8000910:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Period = SCH_tasks_G[j+1].Period;
 8000912:	7bbb      	ldrb	r3, [r7, #14]
 8000914:	1c59      	adds	r1, r3, #1
 8000916:	7bba      	ldrb	r2, [r7, #14]
 8000918:	4847      	ldr	r0, [pc, #284]	; (8000a38 <SCH_Delete_Task+0x1e4>)
 800091a:	460b      	mov	r3, r1
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	440b      	add	r3, r1
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	4403      	add	r3, r0
 8000924:	3308      	adds	r3, #8
 8000926:	6819      	ldr	r1, [r3, #0]
 8000928:	4843      	ldr	r0, [pc, #268]	; (8000a38 <SCH_Delete_Task+0x1e4>)
 800092a:	4613      	mov	r3, r2
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	4413      	add	r3, r2
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	4403      	add	r3, r0
 8000934:	3308      	adds	r3, #8
 8000936:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Delay = SCH_tasks_G[j+1].Delay;
 8000938:	7bbb      	ldrb	r3, [r7, #14]
 800093a:	1c59      	adds	r1, r3, #1
 800093c:	7bba      	ldrb	r2, [r7, #14]
 800093e:	483e      	ldr	r0, [pc, #248]	; (8000a38 <SCH_Delete_Task+0x1e4>)
 8000940:	460b      	mov	r3, r1
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	440b      	add	r3, r1
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	4403      	add	r3, r0
 800094a:	3304      	adds	r3, #4
 800094c:	6819      	ldr	r1, [r3, #0]
 800094e:	483a      	ldr	r0, [pc, #232]	; (8000a38 <SCH_Delete_Task+0x1e4>)
 8000950:	4613      	mov	r3, r2
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	4413      	add	r3, r2
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	4403      	add	r3, r0
 800095a:	3304      	adds	r3, #4
 800095c:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].RunMe = SCH_tasks_G[j+1].RunMe;
 800095e:	7bbb      	ldrb	r3, [r7, #14]
 8000960:	1c59      	adds	r1, r3, #1
 8000962:	7bba      	ldrb	r2, [r7, #14]
 8000964:	4834      	ldr	r0, [pc, #208]	; (8000a38 <SCH_Delete_Task+0x1e4>)
 8000966:	460b      	mov	r3, r1
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	440b      	add	r3, r1
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	4403      	add	r3, r0
 8000970:	330c      	adds	r3, #12
 8000972:	7818      	ldrb	r0, [r3, #0]
 8000974:	4930      	ldr	r1, [pc, #192]	; (8000a38 <SCH_Delete_Task+0x1e4>)
 8000976:	4613      	mov	r3, r2
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	4413      	add	r3, r2
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	440b      	add	r3, r1
 8000980:	330c      	adds	r3, #12
 8000982:	4602      	mov	r2, r0
 8000984:	701a      	strb	r2, [r3, #0]
					SCH_tasks_G[j].TaskID = SCH_tasks_G[j+1].TaskID;
 8000986:	7bbb      	ldrb	r3, [r7, #14]
 8000988:	1c59      	adds	r1, r3, #1
 800098a:	7bba      	ldrb	r2, [r7, #14]
 800098c:	482a      	ldr	r0, [pc, #168]	; (8000a38 <SCH_Delete_Task+0x1e4>)
 800098e:	460b      	mov	r3, r1
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	440b      	add	r3, r1
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	4403      	add	r3, r0
 8000998:	3310      	adds	r3, #16
 800099a:	6819      	ldr	r1, [r3, #0]
 800099c:	4826      	ldr	r0, [pc, #152]	; (8000a38 <SCH_Delete_Task+0x1e4>)
 800099e:	4613      	mov	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	4413      	add	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	4403      	add	r3, r0
 80009a8:	3310      	adds	r3, #16
 80009aa:	6019      	str	r1, [r3, #0]
				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j++){
 80009ac:	7bbb      	ldrb	r3, [r7, #14]
 80009ae:	3301      	adds	r3, #1
 80009b0:	73bb      	strb	r3, [r7, #14]
 80009b2:	7bbb      	ldrb	r3, [r7, #14]
 80009b4:	2b08      	cmp	r3, #8
 80009b6:	d99b      	bls.n	80008f0 <SCH_Delete_Task+0x9c>
				}
				SCH_tasks_G[j].pTask = 0;
 80009b8:	7bba      	ldrb	r2, [r7, #14]
 80009ba:	491f      	ldr	r1, [pc, #124]	; (8000a38 <SCH_Delete_Task+0x1e4>)
 80009bc:	4613      	mov	r3, r2
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	4413      	add	r3, r2
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	440b      	add	r3, r1
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Period = 0;
 80009ca:	7bba      	ldrb	r2, [r7, #14]
 80009cc:	491a      	ldr	r1, [pc, #104]	; (8000a38 <SCH_Delete_Task+0x1e4>)
 80009ce:	4613      	mov	r3, r2
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	4413      	add	r3, r2
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	440b      	add	r3, r1
 80009d8:	3308      	adds	r3, #8
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Delay = 0;
 80009de:	7bba      	ldrb	r2, [r7, #14]
 80009e0:	4915      	ldr	r1, [pc, #84]	; (8000a38 <SCH_Delete_Task+0x1e4>)
 80009e2:	4613      	mov	r3, r2
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	4413      	add	r3, r2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	440b      	add	r3, r1
 80009ec:	3304      	adds	r3, #4
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].RunMe = 0;
 80009f2:	7bba      	ldrb	r2, [r7, #14]
 80009f4:	4910      	ldr	r1, [pc, #64]	; (8000a38 <SCH_Delete_Task+0x1e4>)
 80009f6:	4613      	mov	r3, r2
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	4413      	add	r3, r2
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	440b      	add	r3, r1
 8000a00:	330c      	adds	r3, #12
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]
				SCH_tasks_G[j].TaskID = 0;
 8000a06:	7bba      	ldrb	r2, [r7, #14]
 8000a08:	490b      	ldr	r1, [pc, #44]	; (8000a38 <SCH_Delete_Task+0x1e4>)
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	4413      	add	r3, r2
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	440b      	add	r3, r1
 8000a14:	3310      	adds	r3, #16
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
				return Return_code;
 8000a1a:	7b7b      	ldrb	r3, [r7, #13]
 8000a1c:	e007      	b.n	8000a2e <SCH_Delete_Task+0x1da>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex++){
 8000a1e:	7bfb      	ldrb	r3, [r7, #15]
 8000a20:	3301      	adds	r3, #1
 8000a22:	73fb      	strb	r3, [r7, #15]
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	2b09      	cmp	r3, #9
 8000a28:	f67f af21 	bls.w	800086e <SCH_Delete_Task+0x1a>
			}
		}
	}
	return Return_code; // return status
 8000a2c:	7b7b      	ldrb	r3, [r7, #13]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3714      	adds	r7, #20
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	2000002c 	.word	0x2000002c

08000a3c <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8000a3c:	b5b0      	push	{r4, r5, r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
	// CHECK IF THE TASK READY TO RUN. AFTER FINISHED RUNNING, DELETE THAT TASK AND ADD IT AGAIN
	if(SCH_tasks_G[0].RunMe > 0) {
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <SCH_Dispatch_Tasks+0x54>)
 8000a44:	7b1b      	ldrb	r3, [r3, #12]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d019      	beq.n	8000a7e <SCH_Dispatch_Tasks+0x42>
		(*SCH_tasks_G[0].pTask)();
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <SCH_Dispatch_Tasks+0x54>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4798      	blx	r3
		SCH_tasks_G[0].RunMe = 0;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <SCH_Dispatch_Tasks+0x54>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	731a      	strb	r2, [r3, #12]
		sTask temtask = SCH_tasks_G[0];
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <SCH_Dispatch_Tasks+0x54>)
 8000a58:	1d3c      	adds	r4, r7, #4
 8000a5a:	461d      	mov	r5, r3
 8000a5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a60:	682b      	ldr	r3, [r5, #0]
 8000a62:	6023      	str	r3, [r4, #0]
		SCH_Delete_Task(temtask.TaskID);
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fef4 	bl	8000854 <SCH_Delete_Task>
		if (temtask.Period != 0) {
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d005      	beq.n	8000a7e <SCH_Dispatch_Tasks+0x42>
			SCH_Add_Task(temtask.pTask, temtask.Period, temtask.Period);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	68f9      	ldr	r1, [r7, #12]
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fd75 	bl	8000568 <SCH_Add_Task>
		}
	}
	    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000a7e:	2101      	movs	r1, #1
 8000a80:	2000      	movs	r0, #0
 8000a82:	f000 ff63 	bl	800194c <HAL_PWR_EnterSLEEPMode>
}
 8000a86:	bf00      	nop
 8000a88:	3718      	adds	r7, #24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bdb0      	pop	{r4, r5, r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	2000002c 	.word	0x2000002c

08000a94 <Get_New_Task_ID>:

static uint32_t Get_New_Task_ID(void){
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
	newTaskID++;
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <Get_New_Task_ID+0x2c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	4a08      	ldr	r2, [pc, #32]	; (8000ac0 <Get_New_Task_ID+0x2c>)
 8000aa0:	6013      	str	r3, [r2, #0]
	if(newTaskID == NO_TASK_ID){
 8000aa2:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <Get_New_Task_ID+0x2c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d104      	bne.n	8000ab4 <Get_New_Task_ID+0x20>
		newTaskID++;
 8000aaa:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <Get_New_Task_ID+0x2c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	4a03      	ldr	r2, [pc, #12]	; (8000ac0 <Get_New_Task_ID+0x2c>)
 8000ab2:	6013      	str	r3, [r2, #0]
	}
	return newTaskID;
 8000ab4:	4b02      	ldr	r3, [pc, #8]	; (8000ac0 <Get_New_Task_ID+0x2c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr
 8000ac0:	200000f4 	.word	0x200000f4

08000ac4 <setTimer>:
#include "software_timer.h"

int timer_counter[10] = {0};
int timer_flag[10] = {0};

void setTimer(int duration, int timerId){
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
	timer_counter[timerId] = duration;
 8000ace:	4907      	ldr	r1, [pc, #28]	; (8000aec <setTimer+0x28>)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[timerId] = 0;
 8000ad8:	4a05      	ldr	r2, [pc, #20]	; (8000af0 <setTimer+0x2c>)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	2100      	movs	r1, #0
 8000ade:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr
 8000aec:	200000f8 	.word	0x200000f8
 8000af0:	20000120 	.word	0x20000120

08000af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <HAL_MspInit+0x5c>)
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	4a14      	ldr	r2, [pc, #80]	; (8000b50 <HAL_MspInit+0x5c>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6193      	str	r3, [r2, #24]
 8000b06:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <HAL_MspInit+0x5c>)
 8000b08:	699b      	ldr	r3, [r3, #24]
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <HAL_MspInit+0x5c>)
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <HAL_MspInit+0x5c>)
 8000b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1c:	61d3      	str	r3, [r2, #28]
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <HAL_MspInit+0x5c>)
 8000b20:	69db      	ldr	r3, [r3, #28]
 8000b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <HAL_MspInit+0x60>)
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <HAL_MspInit+0x60>)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b46:	bf00      	nop
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40010000 	.word	0x40010000

08000b58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b088      	sub	sp, #32
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0310 	add.w	r3, r7, #16
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a14      	ldr	r2, [pc, #80]	; (8000bc4 <HAL_ADC_MspInit+0x6c>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d121      	bne.n	8000bbc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <HAL_ADC_MspInit+0x70>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <HAL_ADC_MspInit+0x70>)
 8000b7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <HAL_ADC_MspInit+0x70>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b90:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <HAL_ADC_MspInit+0x70>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a0c      	ldr	r2, [pc, #48]	; (8000bc8 <HAL_ADC_MspInit+0x70>)
 8000b96:	f043 0304 	orr.w	r3, r3, #4
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <HAL_ADC_MspInit+0x70>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0304 	and.w	r3, r3, #4
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bac:	2303      	movs	r3, #3
 8000bae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	f107 0310 	add.w	r3, r7, #16
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <HAL_ADC_MspInit+0x74>)
 8000bb8:	f000 fd1c 	bl	80015f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bbc:	bf00      	nop
 8000bbe:	3720      	adds	r7, #32
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40012400 	.word	0x40012400
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40010800 	.word	0x40010800

08000bd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000be0:	d113      	bne.n	8000c0a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <HAL_TIM_Base_MspInit+0x44>)
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <HAL_TIM_Base_MspInit+0x44>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	61d3      	str	r3, [r2, #28]
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <HAL_TIM_Base_MspInit+0x44>)
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	201c      	movs	r0, #28
 8000c00:	f000 fc0f 	bl	8001422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c04:	201c      	movs	r0, #28
 8000c06:	f000 fc28 	bl	800145a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40021000 	.word	0x40021000

08000c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0310 	add.w	r3, r7, #16
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a1f      	ldr	r2, [pc, #124]	; (8000cb0 <HAL_UART_MspInit+0x98>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d137      	bne.n	8000ca8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c38:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <HAL_UART_MspInit+0x9c>)
 8000c3a:	69db      	ldr	r3, [r3, #28]
 8000c3c:	4a1d      	ldr	r2, [pc, #116]	; (8000cb4 <HAL_UART_MspInit+0x9c>)
 8000c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c42:	61d3      	str	r3, [r2, #28]
 8000c44:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <HAL_UART_MspInit+0x9c>)
 8000c46:	69db      	ldr	r3, [r3, #28]
 8000c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c50:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <HAL_UART_MspInit+0x9c>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	4a17      	ldr	r2, [pc, #92]	; (8000cb4 <HAL_UART_MspInit+0x9c>)
 8000c56:	f043 0304 	orr.w	r3, r3, #4
 8000c5a:	6193      	str	r3, [r2, #24]
 8000c5c:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <HAL_UART_MspInit+0x9c>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	f003 0304 	and.w	r3, r3, #4
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c68:	2304      	movs	r3, #4
 8000c6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 0310 	add.w	r3, r7, #16
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480f      	ldr	r0, [pc, #60]	; (8000cb8 <HAL_UART_MspInit+0xa0>)
 8000c7c:	f000 fcba 	bl	80015f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c80:	2308      	movs	r3, #8
 8000c82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8c:	f107 0310 	add.w	r3, r7, #16
 8000c90:	4619      	mov	r1, r3
 8000c92:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <HAL_UART_MspInit+0xa0>)
 8000c94:	f000 fcae 	bl	80015f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	2026      	movs	r0, #38	; 0x26
 8000c9e:	f000 fbc0 	bl	8001422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ca2:	2026      	movs	r0, #38	; 0x26
 8000ca4:	f000 fbd9 	bl	800145a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ca8:	bf00      	nop
 8000caa:	3720      	adds	r7, #32
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40004400 	.word	0x40004400
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	40010800 	.word	0x40010800

08000cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <NMI_Handler+0x4>

08000cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <HardFault_Handler+0x4>

08000cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <MemManage_Handler+0x4>

08000cce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <BusFault_Handler+0x4>

08000cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <UsageFault_Handler+0x4>

08000cda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr

08000ce6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr

08000cf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr

08000cfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d02:	f000 f889 	bl	8000e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <TIM2_IRQHandler+0x10>)
 8000d12:	f001 fb97 	bl	8002444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	2000021c 	.word	0x2000021c

08000d20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d24:	4802      	ldr	r0, [pc, #8]	; (8000d30 <USART2_IRQHandler+0x10>)
 8000d26:	f001 ffd1 	bl	8002ccc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000264 	.word	0x20000264

08000d34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d40:	f7ff fff8 	bl	8000d34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d44:	480b      	ldr	r0, [pc, #44]	; (8000d74 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d46:	490c      	ldr	r1, [pc, #48]	; (8000d78 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d48:	4a0c      	ldr	r2, [pc, #48]	; (8000d7c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d4c:	e002      	b.n	8000d54 <LoopCopyDataInit>

08000d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d52:	3304      	adds	r3, #4

08000d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d58:	d3f9      	bcc.n	8000d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5a:	4a09      	ldr	r2, [pc, #36]	; (8000d80 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d5c:	4c09      	ldr	r4, [pc, #36]	; (8000d84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d60:	e001      	b.n	8000d66 <LoopFillZerobss>

08000d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d64:	3204      	adds	r2, #4

08000d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d68:	d3fb      	bcc.n	8000d62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d6a:	f002 fd2f 	bl	80037cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d6e:	f7ff fa29 	bl	80001c4 <main>
  bx lr
 8000d72:	4770      	bx	lr
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d78:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d7c:	08003880 	.word	0x08003880
  ldr r2, =_sbss
 8000d80:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d84:	200002b0 	.word	0x200002b0

08000d88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC1_2_IRQHandler>
	...

08000d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <HAL_Init+0x28>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <HAL_Init+0x28>)
 8000d96:	f043 0310 	orr.w	r3, r3, #16
 8000d9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f000 fb35 	bl	800140c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da2:	200f      	movs	r0, #15
 8000da4:	f000 f808 	bl	8000db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da8:	f7ff fea4 	bl	8000af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40022000 	.word	0x40022000

08000db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_InitTick+0x54>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <HAL_InitTick+0x58>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 fb4d 	bl	8001476 <HAL_SYSTICK_Config>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00e      	b.n	8000e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b0f      	cmp	r3, #15
 8000dea:	d80a      	bhi.n	8000e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dec:	2200      	movs	r2, #0
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295
 8000df4:	f000 fb15 	bl	8001422 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df8:	4a06      	ldr	r2, [pc, #24]	; (8000e14 <HAL_InitTick+0x5c>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e000      	b.n	8000e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	20000008 	.word	0x20000008
 8000e14:	20000004 	.word	0x20000004

08000e18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <HAL_IncTick+0x1c>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <HAL_IncTick+0x20>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	4a03      	ldr	r2, [pc, #12]	; (8000e38 <HAL_IncTick+0x20>)
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr
 8000e34:	20000008 	.word	0x20000008
 8000e38:	200002ac 	.word	0x200002ac

08000e3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e40:	4b02      	ldr	r3, [pc, #8]	; (8000e4c <HAL_GetTick+0x10>)
 8000e42:	681b      	ldr	r3, [r3, #0]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	200002ac 	.word	0x200002ac

08000e50 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e0be      	b.n	8000ff0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d109      	bne.n	8000e94 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff fe62 	bl	8000b58 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f000 f9ab 	bl	80011f0 <ADC_ConversionStop_Disable>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea2:	f003 0310 	and.w	r3, r3, #16
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f040 8099 	bne.w	8000fde <HAL_ADC_Init+0x18e>
 8000eac:	7dfb      	ldrb	r3, [r7, #23]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f040 8095 	bne.w	8000fde <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ebc:	f023 0302 	bic.w	r3, r3, #2
 8000ec0:	f043 0202 	orr.w	r2, r3, #2
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ed0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	7b1b      	ldrb	r3, [r3, #12]
 8000ed6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ed8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ee8:	d003      	beq.n	8000ef2 <HAL_ADC_Init+0xa2>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d102      	bne.n	8000ef8 <HAL_ADC_Init+0xa8>
 8000ef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef6:	e000      	b.n	8000efa <HAL_ADC_Init+0xaa>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	7d1b      	ldrb	r3, [r3, #20]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d119      	bne.n	8000f3c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	7b1b      	ldrb	r3, [r3, #12]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d109      	bne.n	8000f24 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	3b01      	subs	r3, #1
 8000f16:	035a      	lsls	r2, r3, #13
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	e00b      	b.n	8000f3c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f28:	f043 0220 	orr.w	r2, r3, #32
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f34:	f043 0201 	orr.w	r2, r3, #1
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <HAL_ADC_Init+0x1a8>)
 8000f58:	4013      	ands	r3, r2
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	6812      	ldr	r2, [r2, #0]
 8000f5e:	68b9      	ldr	r1, [r7, #8]
 8000f60:	430b      	orrs	r3, r1
 8000f62:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f6c:	d003      	beq.n	8000f76 <HAL_ADC_Init+0x126>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d104      	bne.n	8000f80 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	051b      	lsls	r3, r3, #20
 8000f7e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f86:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	430a      	orrs	r2, r1
 8000f92:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	689a      	ldr	r2, [r3, #8]
 8000f9a:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <HAL_ADC_Init+0x1ac>)
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	68ba      	ldr	r2, [r7, #8]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d10b      	bne.n	8000fbc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fae:	f023 0303 	bic.w	r3, r3, #3
 8000fb2:	f043 0201 	orr.w	r2, r3, #1
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fba:	e018      	b.n	8000fee <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc0:	f023 0312 	bic.w	r3, r3, #18
 8000fc4:	f043 0210 	orr.w	r2, r3, #16
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd0:	f043 0201 	orr.w	r2, r3, #1
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fdc:	e007      	b.n	8000fee <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe2:	f043 0210 	orr.w	r2, r3, #16
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	ffe1f7fd 	.word	0xffe1f7fd
 8000ffc:	ff1f0efe 	.word	0xff1f0efe

08001000 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001018:	2b01      	cmp	r3, #1
 800101a:	d101      	bne.n	8001020 <HAL_ADC_ConfigChannel+0x20>
 800101c:	2302      	movs	r3, #2
 800101e:	e0dc      	b.n	80011da <HAL_ADC_ConfigChannel+0x1da>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2201      	movs	r2, #1
 8001024:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	2b06      	cmp	r3, #6
 800102e:	d81c      	bhi.n	800106a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	4613      	mov	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	3b05      	subs	r3, #5
 8001042:	221f      	movs	r2, #31
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	4019      	ands	r1, r3
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	6818      	ldr	r0, [r3, #0]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	4613      	mov	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	3b05      	subs	r3, #5
 800105c:	fa00 f203 	lsl.w	r2, r0, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	430a      	orrs	r2, r1
 8001066:	635a      	str	r2, [r3, #52]	; 0x34
 8001068:	e03c      	b.n	80010e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b0c      	cmp	r3, #12
 8001070:	d81c      	bhi.n	80010ac <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	3b23      	subs	r3, #35	; 0x23
 8001084:	221f      	movs	r2, #31
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	4019      	ands	r1, r3
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	4613      	mov	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	3b23      	subs	r3, #35	; 0x23
 800109e:	fa00 f203 	lsl.w	r2, r0, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	430a      	orrs	r2, r1
 80010a8:	631a      	str	r2, [r3, #48]	; 0x30
 80010aa:	e01b      	b.n	80010e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	4613      	mov	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	3b41      	subs	r3, #65	; 0x41
 80010be:	221f      	movs	r2, #31
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	4019      	ands	r1, r3
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	4613      	mov	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	3b41      	subs	r3, #65	; 0x41
 80010d8:	fa00 f203 	lsl.w	r2, r0, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	430a      	orrs	r2, r1
 80010e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b09      	cmp	r3, #9
 80010ea:	d91c      	bls.n	8001126 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	68d9      	ldr	r1, [r3, #12]
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	4613      	mov	r3, r2
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	4413      	add	r3, r2
 80010fc:	3b1e      	subs	r3, #30
 80010fe:	2207      	movs	r2, #7
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	4019      	ands	r1, r3
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	6898      	ldr	r0, [r3, #8]
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4613      	mov	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	3b1e      	subs	r3, #30
 8001118:	fa00 f203 	lsl.w	r2, r0, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	430a      	orrs	r2, r1
 8001122:	60da      	str	r2, [r3, #12]
 8001124:	e019      	b.n	800115a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6919      	ldr	r1, [r3, #16]
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4613      	mov	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	4413      	add	r3, r2
 8001136:	2207      	movs	r2, #7
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	4019      	ands	r1, r3
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	6898      	ldr	r0, [r3, #8]
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4613      	mov	r3, r2
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4413      	add	r3, r2
 800114e:	fa00 f203 	lsl.w	r2, r0, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	430a      	orrs	r2, r1
 8001158:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b10      	cmp	r3, #16
 8001160:	d003      	beq.n	800116a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001166:	2b11      	cmp	r3, #17
 8001168:	d132      	bne.n	80011d0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a1d      	ldr	r2, [pc, #116]	; (80011e4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d125      	bne.n	80011c0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d126      	bne.n	80011d0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001190:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b10      	cmp	r3, #16
 8001198:	d11a      	bne.n	80011d0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800119a:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <HAL_ADC_ConfigChannel+0x1e8>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a13      	ldr	r2, [pc, #76]	; (80011ec <HAL_ADC_ConfigChannel+0x1ec>)
 80011a0:	fba2 2303 	umull	r2, r3, r2, r3
 80011a4:	0c9a      	lsrs	r2, r3, #18
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011b0:	e002      	b.n	80011b8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	3b01      	subs	r3, #1
 80011b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f9      	bne.n	80011b2 <HAL_ADC_ConfigChannel+0x1b2>
 80011be:	e007      	b.n	80011d0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c4:	f043 0220 	orr.w	r2, r3, #32
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	40012400 	.word	0x40012400
 80011e8:	20000000 	.word	0x20000000
 80011ec:	431bde83 	.word	0x431bde83

080011f0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b01      	cmp	r3, #1
 8001208:	d12e      	bne.n	8001268 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0201 	bic.w	r2, r2, #1
 8001218:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800121a:	f7ff fe0f 	bl	8000e3c <HAL_GetTick>
 800121e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001220:	e01b      	b.n	800125a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001222:	f7ff fe0b 	bl	8000e3c <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d914      	bls.n	800125a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	2b01      	cmp	r3, #1
 800123c:	d10d      	bne.n	800125a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001242:	f043 0210 	orr.w	r2, r3, #16
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124e:	f043 0201 	orr.w	r2, r3, #1
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e007      	b.n	800126a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	2b01      	cmp	r3, #1
 8001266:	d0dc      	beq.n	8001222 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001290:	4013      	ands	r3, r2
 8001292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800129c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a6:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <__NVIC_SetPriorityGrouping+0x44>)
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	60d3      	str	r3, [r2, #12]
}
 80012ac:	bf00      	nop
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <__NVIC_GetPriorityGrouping+0x18>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	0a1b      	lsrs	r3, r3, #8
 80012c6:	f003 0307 	and.w	r3, r3, #7
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	db0b      	blt.n	8001302 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	f003 021f 	and.w	r2, r3, #31
 80012f0:	4906      	ldr	r1, [pc, #24]	; (800130c <__NVIC_EnableIRQ+0x34>)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	095b      	lsrs	r3, r3, #5
 80012f8:	2001      	movs	r0, #1
 80012fa:	fa00 f202 	lsl.w	r2, r0, r2
 80012fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	e000e100 	.word	0xe000e100

08001310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	2b00      	cmp	r3, #0
 8001322:	db0a      	blt.n	800133a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	490c      	ldr	r1, [pc, #48]	; (800135c <__NVIC_SetPriority+0x4c>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	0112      	lsls	r2, r2, #4
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	440b      	add	r3, r1
 8001334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001338:	e00a      	b.n	8001350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4908      	ldr	r1, [pc, #32]	; (8001360 <__NVIC_SetPriority+0x50>)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	3b04      	subs	r3, #4
 8001348:	0112      	lsls	r2, r2, #4
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	440b      	add	r3, r1
 800134e:	761a      	strb	r2, [r3, #24]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000e100 	.word	0xe000e100
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	; 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f1c3 0307 	rsb	r3, r3, #7
 800137e:	2b04      	cmp	r3, #4
 8001380:	bf28      	it	cs
 8001382:	2304      	movcs	r3, #4
 8001384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3304      	adds	r3, #4
 800138a:	2b06      	cmp	r3, #6
 800138c:	d902      	bls.n	8001394 <NVIC_EncodePriority+0x30>
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3b03      	subs	r3, #3
 8001392:	e000      	b.n	8001396 <NVIC_EncodePriority+0x32>
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	f04f 32ff 	mov.w	r2, #4294967295
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43da      	mvns	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	401a      	ands	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ac:	f04f 31ff 	mov.w	r1, #4294967295
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	43d9      	mvns	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	4313      	orrs	r3, r2
         );
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3724      	adds	r7, #36	; 0x24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d8:	d301      	bcc.n	80013de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013da:	2301      	movs	r3, #1
 80013dc:	e00f      	b.n	80013fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013de:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <SysTick_Config+0x40>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e6:	210f      	movs	r1, #15
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ec:	f7ff ff90 	bl	8001310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <SysTick_Config+0x40>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f6:	4b04      	ldr	r3, [pc, #16]	; (8001408 <SysTick_Config+0x40>)
 80013f8:	2207      	movs	r2, #7
 80013fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	e000e010 	.word	0xe000e010

0800140c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff2d 	bl	8001274 <__NVIC_SetPriorityGrouping>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001422:	b580      	push	{r7, lr}
 8001424:	b086      	sub	sp, #24
 8001426:	af00      	add	r7, sp, #0
 8001428:	4603      	mov	r3, r0
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
 800142e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001434:	f7ff ff42 	bl	80012bc <__NVIC_GetPriorityGrouping>
 8001438:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	68b9      	ldr	r1, [r7, #8]
 800143e:	6978      	ldr	r0, [r7, #20]
 8001440:	f7ff ff90 	bl	8001364 <NVIC_EncodePriority>
 8001444:	4602      	mov	r2, r0
 8001446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144a:	4611      	mov	r1, r2
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff5f 	bl	8001310 <__NVIC_SetPriority>
}
 8001452:	bf00      	nop
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff35 	bl	80012d8 <__NVIC_EnableIRQ>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff ffa2 	bl	80013c8 <SysTick_Config>
 8001484:	4603      	mov	r3, r0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800148e:	b480      	push	{r7}
 8001490:	b085      	sub	sp, #20
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d008      	beq.n	80014b8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2204      	movs	r2, #4
 80014aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e020      	b.n	80014fa <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 020e 	bic.w	r2, r2, #14
 80014c6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0201 	bic.w	r2, r2, #1
 80014d6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e0:	2101      	movs	r1, #1
 80014e2:	fa01 f202 	lsl.w	r2, r1, r2
 80014e6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2201      	movs	r2, #1
 80014ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800150c:	2300      	movs	r3, #0
 800150e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d005      	beq.n	8001528 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2204      	movs	r2, #4
 8001520:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	73fb      	strb	r3, [r7, #15]
 8001526:	e051      	b.n	80015cc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 020e 	bic.w	r2, r2, #14
 8001536:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0201 	bic.w	r2, r2, #1
 8001546:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a22      	ldr	r2, [pc, #136]	; (80015d8 <HAL_DMA_Abort_IT+0xd4>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d029      	beq.n	80015a6 <HAL_DMA_Abort_IT+0xa2>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a21      	ldr	r2, [pc, #132]	; (80015dc <HAL_DMA_Abort_IT+0xd8>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d022      	beq.n	80015a2 <HAL_DMA_Abort_IT+0x9e>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a1f      	ldr	r2, [pc, #124]	; (80015e0 <HAL_DMA_Abort_IT+0xdc>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d01a      	beq.n	800159c <HAL_DMA_Abort_IT+0x98>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a1e      	ldr	r2, [pc, #120]	; (80015e4 <HAL_DMA_Abort_IT+0xe0>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d012      	beq.n	8001596 <HAL_DMA_Abort_IT+0x92>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a1c      	ldr	r2, [pc, #112]	; (80015e8 <HAL_DMA_Abort_IT+0xe4>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d00a      	beq.n	8001590 <HAL_DMA_Abort_IT+0x8c>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a1b      	ldr	r2, [pc, #108]	; (80015ec <HAL_DMA_Abort_IT+0xe8>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d102      	bne.n	800158a <HAL_DMA_Abort_IT+0x86>
 8001584:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001588:	e00e      	b.n	80015a8 <HAL_DMA_Abort_IT+0xa4>
 800158a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800158e:	e00b      	b.n	80015a8 <HAL_DMA_Abort_IT+0xa4>
 8001590:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001594:	e008      	b.n	80015a8 <HAL_DMA_Abort_IT+0xa4>
 8001596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159a:	e005      	b.n	80015a8 <HAL_DMA_Abort_IT+0xa4>
 800159c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a0:	e002      	b.n	80015a8 <HAL_DMA_Abort_IT+0xa4>
 80015a2:	2310      	movs	r3, #16
 80015a4:	e000      	b.n	80015a8 <HAL_DMA_Abort_IT+0xa4>
 80015a6:	2301      	movs	r3, #1
 80015a8:	4a11      	ldr	r2, [pc, #68]	; (80015f0 <HAL_DMA_Abort_IT+0xec>)
 80015aa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	4798      	blx	r3
    } 
  }
  return status;
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40020008 	.word	0x40020008
 80015dc:	4002001c 	.word	0x4002001c
 80015e0:	40020030 	.word	0x40020030
 80015e4:	40020044 	.word	0x40020044
 80015e8:	40020058 	.word	0x40020058
 80015ec:	4002006c 	.word	0x4002006c
 80015f0:	40020000 	.word	0x40020000

080015f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b08b      	sub	sp, #44	; 0x2c
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015fe:	2300      	movs	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001606:	e148      	b.n	800189a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001608:	2201      	movs	r2, #1
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	69fa      	ldr	r2, [r7, #28]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	429a      	cmp	r2, r3
 8001622:	f040 8137 	bne.w	8001894 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	4aa3      	ldr	r2, [pc, #652]	; (80018b8 <HAL_GPIO_Init+0x2c4>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d05e      	beq.n	80016ee <HAL_GPIO_Init+0xfa>
 8001630:	4aa1      	ldr	r2, [pc, #644]	; (80018b8 <HAL_GPIO_Init+0x2c4>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d875      	bhi.n	8001722 <HAL_GPIO_Init+0x12e>
 8001636:	4aa1      	ldr	r2, [pc, #644]	; (80018bc <HAL_GPIO_Init+0x2c8>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d058      	beq.n	80016ee <HAL_GPIO_Init+0xfa>
 800163c:	4a9f      	ldr	r2, [pc, #636]	; (80018bc <HAL_GPIO_Init+0x2c8>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d86f      	bhi.n	8001722 <HAL_GPIO_Init+0x12e>
 8001642:	4a9f      	ldr	r2, [pc, #636]	; (80018c0 <HAL_GPIO_Init+0x2cc>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d052      	beq.n	80016ee <HAL_GPIO_Init+0xfa>
 8001648:	4a9d      	ldr	r2, [pc, #628]	; (80018c0 <HAL_GPIO_Init+0x2cc>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d869      	bhi.n	8001722 <HAL_GPIO_Init+0x12e>
 800164e:	4a9d      	ldr	r2, [pc, #628]	; (80018c4 <HAL_GPIO_Init+0x2d0>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d04c      	beq.n	80016ee <HAL_GPIO_Init+0xfa>
 8001654:	4a9b      	ldr	r2, [pc, #620]	; (80018c4 <HAL_GPIO_Init+0x2d0>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d863      	bhi.n	8001722 <HAL_GPIO_Init+0x12e>
 800165a:	4a9b      	ldr	r2, [pc, #620]	; (80018c8 <HAL_GPIO_Init+0x2d4>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d046      	beq.n	80016ee <HAL_GPIO_Init+0xfa>
 8001660:	4a99      	ldr	r2, [pc, #612]	; (80018c8 <HAL_GPIO_Init+0x2d4>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d85d      	bhi.n	8001722 <HAL_GPIO_Init+0x12e>
 8001666:	2b12      	cmp	r3, #18
 8001668:	d82a      	bhi.n	80016c0 <HAL_GPIO_Init+0xcc>
 800166a:	2b12      	cmp	r3, #18
 800166c:	d859      	bhi.n	8001722 <HAL_GPIO_Init+0x12e>
 800166e:	a201      	add	r2, pc, #4	; (adr r2, 8001674 <HAL_GPIO_Init+0x80>)
 8001670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001674:	080016ef 	.word	0x080016ef
 8001678:	080016c9 	.word	0x080016c9
 800167c:	080016db 	.word	0x080016db
 8001680:	0800171d 	.word	0x0800171d
 8001684:	08001723 	.word	0x08001723
 8001688:	08001723 	.word	0x08001723
 800168c:	08001723 	.word	0x08001723
 8001690:	08001723 	.word	0x08001723
 8001694:	08001723 	.word	0x08001723
 8001698:	08001723 	.word	0x08001723
 800169c:	08001723 	.word	0x08001723
 80016a0:	08001723 	.word	0x08001723
 80016a4:	08001723 	.word	0x08001723
 80016a8:	08001723 	.word	0x08001723
 80016ac:	08001723 	.word	0x08001723
 80016b0:	08001723 	.word	0x08001723
 80016b4:	08001723 	.word	0x08001723
 80016b8:	080016d1 	.word	0x080016d1
 80016bc:	080016e5 	.word	0x080016e5
 80016c0:	4a82      	ldr	r2, [pc, #520]	; (80018cc <HAL_GPIO_Init+0x2d8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d013      	beq.n	80016ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016c6:	e02c      	b.n	8001722 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	623b      	str	r3, [r7, #32]
          break;
 80016ce:	e029      	b.n	8001724 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	3304      	adds	r3, #4
 80016d6:	623b      	str	r3, [r7, #32]
          break;
 80016d8:	e024      	b.n	8001724 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	3308      	adds	r3, #8
 80016e0:	623b      	str	r3, [r7, #32]
          break;
 80016e2:	e01f      	b.n	8001724 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	330c      	adds	r3, #12
 80016ea:	623b      	str	r3, [r7, #32]
          break;
 80016ec:	e01a      	b.n	8001724 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d102      	bne.n	80016fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016f6:	2304      	movs	r3, #4
 80016f8:	623b      	str	r3, [r7, #32]
          break;
 80016fa:	e013      	b.n	8001724 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d105      	bne.n	8001710 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001704:	2308      	movs	r3, #8
 8001706:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	611a      	str	r2, [r3, #16]
          break;
 800170e:	e009      	b.n	8001724 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001710:	2308      	movs	r3, #8
 8001712:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69fa      	ldr	r2, [r7, #28]
 8001718:	615a      	str	r2, [r3, #20]
          break;
 800171a:	e003      	b.n	8001724 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800171c:	2300      	movs	r3, #0
 800171e:	623b      	str	r3, [r7, #32]
          break;
 8001720:	e000      	b.n	8001724 <HAL_GPIO_Init+0x130>
          break;
 8001722:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	2bff      	cmp	r3, #255	; 0xff
 8001728:	d801      	bhi.n	800172e <HAL_GPIO_Init+0x13a>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	e001      	b.n	8001732 <HAL_GPIO_Init+0x13e>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3304      	adds	r3, #4
 8001732:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	2bff      	cmp	r3, #255	; 0xff
 8001738:	d802      	bhi.n	8001740 <HAL_GPIO_Init+0x14c>
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	e002      	b.n	8001746 <HAL_GPIO_Init+0x152>
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	3b08      	subs	r3, #8
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	210f      	movs	r1, #15
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	fa01 f303 	lsl.w	r3, r1, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	401a      	ands	r2, r3
 8001758:	6a39      	ldr	r1, [r7, #32]
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	fa01 f303 	lsl.w	r3, r1, r3
 8001760:	431a      	orrs	r2, r3
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 8090 	beq.w	8001894 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001774:	4b56      	ldr	r3, [pc, #344]	; (80018d0 <HAL_GPIO_Init+0x2dc>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	4a55      	ldr	r2, [pc, #340]	; (80018d0 <HAL_GPIO_Init+0x2dc>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6193      	str	r3, [r2, #24]
 8001780:	4b53      	ldr	r3, [pc, #332]	; (80018d0 <HAL_GPIO_Init+0x2dc>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800178c:	4a51      	ldr	r2, [pc, #324]	; (80018d4 <HAL_GPIO_Init+0x2e0>)
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	089b      	lsrs	r3, r3, #2
 8001792:	3302      	adds	r3, #2
 8001794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001798:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	220f      	movs	r2, #15
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	4013      	ands	r3, r2
 80017ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a49      	ldr	r2, [pc, #292]	; (80018d8 <HAL_GPIO_Init+0x2e4>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d00d      	beq.n	80017d4 <HAL_GPIO_Init+0x1e0>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a48      	ldr	r2, [pc, #288]	; (80018dc <HAL_GPIO_Init+0x2e8>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d007      	beq.n	80017d0 <HAL_GPIO_Init+0x1dc>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a47      	ldr	r2, [pc, #284]	; (80018e0 <HAL_GPIO_Init+0x2ec>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d101      	bne.n	80017cc <HAL_GPIO_Init+0x1d8>
 80017c8:	2302      	movs	r3, #2
 80017ca:	e004      	b.n	80017d6 <HAL_GPIO_Init+0x1e2>
 80017cc:	2303      	movs	r3, #3
 80017ce:	e002      	b.n	80017d6 <HAL_GPIO_Init+0x1e2>
 80017d0:	2301      	movs	r3, #1
 80017d2:	e000      	b.n	80017d6 <HAL_GPIO_Init+0x1e2>
 80017d4:	2300      	movs	r3, #0
 80017d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d8:	f002 0203 	and.w	r2, r2, #3
 80017dc:	0092      	lsls	r2, r2, #2
 80017de:	4093      	lsls	r3, r2
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017e6:	493b      	ldr	r1, [pc, #236]	; (80018d4 <HAL_GPIO_Init+0x2e0>)
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	089b      	lsrs	r3, r3, #2
 80017ec:	3302      	adds	r3, #2
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d006      	beq.n	800180e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001800:	4b38      	ldr	r3, [pc, #224]	; (80018e4 <HAL_GPIO_Init+0x2f0>)
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	4937      	ldr	r1, [pc, #220]	; (80018e4 <HAL_GPIO_Init+0x2f0>)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	4313      	orrs	r3, r2
 800180a:	608b      	str	r3, [r1, #8]
 800180c:	e006      	b.n	800181c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800180e:	4b35      	ldr	r3, [pc, #212]	; (80018e4 <HAL_GPIO_Init+0x2f0>)
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	43db      	mvns	r3, r3
 8001816:	4933      	ldr	r1, [pc, #204]	; (80018e4 <HAL_GPIO_Init+0x2f0>)
 8001818:	4013      	ands	r3, r2
 800181a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d006      	beq.n	8001836 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001828:	4b2e      	ldr	r3, [pc, #184]	; (80018e4 <HAL_GPIO_Init+0x2f0>)
 800182a:	68da      	ldr	r2, [r3, #12]
 800182c:	492d      	ldr	r1, [pc, #180]	; (80018e4 <HAL_GPIO_Init+0x2f0>)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	60cb      	str	r3, [r1, #12]
 8001834:	e006      	b.n	8001844 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001836:	4b2b      	ldr	r3, [pc, #172]	; (80018e4 <HAL_GPIO_Init+0x2f0>)
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	43db      	mvns	r3, r3
 800183e:	4929      	ldr	r1, [pc, #164]	; (80018e4 <HAL_GPIO_Init+0x2f0>)
 8001840:	4013      	ands	r3, r2
 8001842:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d006      	beq.n	800185e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001850:	4b24      	ldr	r3, [pc, #144]	; (80018e4 <HAL_GPIO_Init+0x2f0>)
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	4923      	ldr	r1, [pc, #140]	; (80018e4 <HAL_GPIO_Init+0x2f0>)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	4313      	orrs	r3, r2
 800185a:	604b      	str	r3, [r1, #4]
 800185c:	e006      	b.n	800186c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800185e:	4b21      	ldr	r3, [pc, #132]	; (80018e4 <HAL_GPIO_Init+0x2f0>)
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	43db      	mvns	r3, r3
 8001866:	491f      	ldr	r1, [pc, #124]	; (80018e4 <HAL_GPIO_Init+0x2f0>)
 8001868:	4013      	ands	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d006      	beq.n	8001886 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001878:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <HAL_GPIO_Init+0x2f0>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4919      	ldr	r1, [pc, #100]	; (80018e4 <HAL_GPIO_Init+0x2f0>)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	600b      	str	r3, [r1, #0]
 8001884:	e006      	b.n	8001894 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001886:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <HAL_GPIO_Init+0x2f0>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	43db      	mvns	r3, r3
 800188e:	4915      	ldr	r1, [pc, #84]	; (80018e4 <HAL_GPIO_Init+0x2f0>)
 8001890:	4013      	ands	r3, r2
 8001892:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001896:	3301      	adds	r3, #1
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	fa22 f303 	lsr.w	r3, r2, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f47f aeaf 	bne.w	8001608 <HAL_GPIO_Init+0x14>
  }
}
 80018aa:	bf00      	nop
 80018ac:	bf00      	nop
 80018ae:	372c      	adds	r7, #44	; 0x2c
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	10320000 	.word	0x10320000
 80018bc:	10310000 	.word	0x10310000
 80018c0:	10220000 	.word	0x10220000
 80018c4:	10210000 	.word	0x10210000
 80018c8:	10120000 	.word	0x10120000
 80018cc:	10110000 	.word	0x10110000
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40010000 	.word	0x40010000
 80018d8:	40010800 	.word	0x40010800
 80018dc:	40010c00 	.word	0x40010c00
 80018e0:	40011000 	.word	0x40011000
 80018e4:	40010400 	.word	0x40010400

080018e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	807b      	strh	r3, [r7, #2]
 80018f4:	4613      	mov	r3, r2
 80018f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018f8:	787b      	ldrb	r3, [r7, #1]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018fe:	887a      	ldrh	r2, [r7, #2]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001904:	e003      	b.n	800190e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001906:	887b      	ldrh	r3, [r7, #2]
 8001908:	041a      	lsls	r2, r3, #16
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	611a      	str	r2, [r3, #16]
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800192a:	887a      	ldrh	r2, [r7, #2]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4013      	ands	r3, r2
 8001930:	041a      	lsls	r2, r3, #16
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	43d9      	mvns	r1, r3
 8001936:	887b      	ldrh	r3, [r7, #2]
 8001938:	400b      	ands	r3, r1
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	611a      	str	r2, [r3, #16]
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
	...

0800194c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_PWR_EnterSLEEPMode+0x34>)
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	4a08      	ldr	r2, [pc, #32]	; (8001980 <HAL_PWR_EnterSLEEPMode+0x34>)
 800195e:	f023 0304 	bic.w	r3, r3, #4
 8001962:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d101      	bne.n	800196e <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800196a:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 800196c:	e002      	b.n	8001974 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 800196e:	bf40      	sev
    __WFE();
 8001970:	bf20      	wfe
    __WFE();
 8001972:	bf20      	wfe
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e26c      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 8087 	beq.w	8001ab2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019a4:	4b92      	ldr	r3, [pc, #584]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 030c 	and.w	r3, r3, #12
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	d00c      	beq.n	80019ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019b0:	4b8f      	ldr	r3, [pc, #572]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 030c 	and.w	r3, r3, #12
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	d112      	bne.n	80019e2 <HAL_RCC_OscConfig+0x5e>
 80019bc:	4b8c      	ldr	r3, [pc, #560]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c8:	d10b      	bne.n	80019e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ca:	4b89      	ldr	r3, [pc, #548]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d06c      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x12c>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d168      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e246      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ea:	d106      	bne.n	80019fa <HAL_RCC_OscConfig+0x76>
 80019ec:	4b80      	ldr	r3, [pc, #512]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a7f      	ldr	r2, [pc, #508]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 80019f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	e02e      	b.n	8001a58 <HAL_RCC_OscConfig+0xd4>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10c      	bne.n	8001a1c <HAL_RCC_OscConfig+0x98>
 8001a02:	4b7b      	ldr	r3, [pc, #492]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a7a      	ldr	r2, [pc, #488]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	4b78      	ldr	r3, [pc, #480]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a77      	ldr	r2, [pc, #476]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	e01d      	b.n	8001a58 <HAL_RCC_OscConfig+0xd4>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a24:	d10c      	bne.n	8001a40 <HAL_RCC_OscConfig+0xbc>
 8001a26:	4b72      	ldr	r3, [pc, #456]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a71      	ldr	r2, [pc, #452]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	4b6f      	ldr	r3, [pc, #444]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a6e      	ldr	r2, [pc, #440]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	e00b      	b.n	8001a58 <HAL_RCC_OscConfig+0xd4>
 8001a40:	4b6b      	ldr	r3, [pc, #428]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a6a      	ldr	r2, [pc, #424]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	4b68      	ldr	r3, [pc, #416]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a67      	ldr	r2, [pc, #412]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d013      	beq.n	8001a88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7ff f9ec 	bl	8000e3c <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a68:	f7ff f9e8 	bl	8000e3c <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b64      	cmp	r3, #100	; 0x64
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e1fa      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7a:	4b5d      	ldr	r3, [pc, #372]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0xe4>
 8001a86:	e014      	b.n	8001ab2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a88:	f7ff f9d8 	bl	8000e3c <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a90:	f7ff f9d4 	bl	8000e3c <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b64      	cmp	r3, #100	; 0x64
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e1e6      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa2:	4b53      	ldr	r3, [pc, #332]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f0      	bne.n	8001a90 <HAL_RCC_OscConfig+0x10c>
 8001aae:	e000      	b.n	8001ab2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d063      	beq.n	8001b86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001abe:	4b4c      	ldr	r3, [pc, #304]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00b      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aca:	4b49      	ldr	r3, [pc, #292]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	2b08      	cmp	r3, #8
 8001ad4:	d11c      	bne.n	8001b10 <HAL_RCC_OscConfig+0x18c>
 8001ad6:	4b46      	ldr	r3, [pc, #280]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d116      	bne.n	8001b10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae2:	4b43      	ldr	r3, [pc, #268]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d005      	beq.n	8001afa <HAL_RCC_OscConfig+0x176>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d001      	beq.n	8001afa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e1ba      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afa:	4b3d      	ldr	r3, [pc, #244]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4939      	ldr	r1, [pc, #228]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0e:	e03a      	b.n	8001b86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d020      	beq.n	8001b5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b18:	4b36      	ldr	r3, [pc, #216]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1e:	f7ff f98d 	bl	8000e3c <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b26:	f7ff f989 	bl	8000e3c <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e19b      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b38:	4b2d      	ldr	r3, [pc, #180]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0f0      	beq.n	8001b26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b44:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	4927      	ldr	r1, [pc, #156]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	600b      	str	r3, [r1, #0]
 8001b58:	e015      	b.n	8001b86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b5a:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7ff f96c 	bl	8000e3c <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b68:	f7ff f968 	bl	8000e3c <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e17a      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7a:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d03a      	beq.n	8001c08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d019      	beq.n	8001bce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b9a:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <HAL_RCC_OscConfig+0x274>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba0:	f7ff f94c 	bl	8000e3c <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba8:	f7ff f948 	bl	8000e3c <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e15a      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bba:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bc6:	2001      	movs	r0, #1
 8001bc8:	f000 facc 	bl	8002164 <RCC_Delay>
 8001bcc:	e01c      	b.n	8001c08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bce:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <HAL_RCC_OscConfig+0x274>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd4:	f7ff f932 	bl	8000e3c <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bda:	e00f      	b.n	8001bfc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bdc:	f7ff f92e 	bl	8000e3c <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d908      	bls.n	8001bfc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e140      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
 8001bee:	bf00      	nop
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	42420000 	.word	0x42420000
 8001bf8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bfc:	4b9e      	ldr	r3, [pc, #632]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1e9      	bne.n	8001bdc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80a6 	beq.w	8001d62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c16:	2300      	movs	r3, #0
 8001c18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1a:	4b97      	ldr	r3, [pc, #604]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10d      	bne.n	8001c42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c26:	4b94      	ldr	r3, [pc, #592]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	4a93      	ldr	r2, [pc, #588]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c30:	61d3      	str	r3, [r2, #28]
 8001c32:	4b91      	ldr	r3, [pc, #580]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c42:	4b8e      	ldr	r3, [pc, #568]	; (8001e7c <HAL_RCC_OscConfig+0x4f8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d118      	bne.n	8001c80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c4e:	4b8b      	ldr	r3, [pc, #556]	; (8001e7c <HAL_RCC_OscConfig+0x4f8>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a8a      	ldr	r2, [pc, #552]	; (8001e7c <HAL_RCC_OscConfig+0x4f8>)
 8001c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c5a:	f7ff f8ef 	bl	8000e3c <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c62:	f7ff f8eb 	bl	8000e3c <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b64      	cmp	r3, #100	; 0x64
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e0fd      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c74:	4b81      	ldr	r3, [pc, #516]	; (8001e7c <HAL_RCC_OscConfig+0x4f8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d106      	bne.n	8001c96 <HAL_RCC_OscConfig+0x312>
 8001c88:	4b7b      	ldr	r3, [pc, #492]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	4a7a      	ldr	r2, [pc, #488]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	6213      	str	r3, [r2, #32]
 8001c94:	e02d      	b.n	8001cf2 <HAL_RCC_OscConfig+0x36e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10c      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x334>
 8001c9e:	4b76      	ldr	r3, [pc, #472]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	4a75      	ldr	r2, [pc, #468]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	f023 0301 	bic.w	r3, r3, #1
 8001ca8:	6213      	str	r3, [r2, #32]
 8001caa:	4b73      	ldr	r3, [pc, #460]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001cac:	6a1b      	ldr	r3, [r3, #32]
 8001cae:	4a72      	ldr	r2, [pc, #456]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001cb0:	f023 0304 	bic.w	r3, r3, #4
 8001cb4:	6213      	str	r3, [r2, #32]
 8001cb6:	e01c      	b.n	8001cf2 <HAL_RCC_OscConfig+0x36e>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2b05      	cmp	r3, #5
 8001cbe:	d10c      	bne.n	8001cda <HAL_RCC_OscConfig+0x356>
 8001cc0:	4b6d      	ldr	r3, [pc, #436]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	4a6c      	ldr	r2, [pc, #432]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001cc6:	f043 0304 	orr.w	r3, r3, #4
 8001cca:	6213      	str	r3, [r2, #32]
 8001ccc:	4b6a      	ldr	r3, [pc, #424]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	4a69      	ldr	r2, [pc, #420]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6213      	str	r3, [r2, #32]
 8001cd8:	e00b      	b.n	8001cf2 <HAL_RCC_OscConfig+0x36e>
 8001cda:	4b67      	ldr	r3, [pc, #412]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	4a66      	ldr	r2, [pc, #408]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001ce0:	f023 0301 	bic.w	r3, r3, #1
 8001ce4:	6213      	str	r3, [r2, #32]
 8001ce6:	4b64      	ldr	r3, [pc, #400]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	4a63      	ldr	r2, [pc, #396]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	f023 0304 	bic.w	r3, r3, #4
 8001cf0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d015      	beq.n	8001d26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f89f 	bl	8000e3c <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff f89b 	bl	8000e3c <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e0ab      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d18:	4b57      	ldr	r3, [pc, #348]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0ee      	beq.n	8001d02 <HAL_RCC_OscConfig+0x37e>
 8001d24:	e014      	b.n	8001d50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d26:	f7ff f889 	bl	8000e3c <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d2c:	e00a      	b.n	8001d44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2e:	f7ff f885 	bl	8000e3c <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e095      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d44:	4b4c      	ldr	r3, [pc, #304]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1ee      	bne.n	8001d2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d50:	7dfb      	ldrb	r3, [r7, #23]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d105      	bne.n	8001d62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d56:	4b48      	ldr	r3, [pc, #288]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	4a47      	ldr	r2, [pc, #284]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 8081 	beq.w	8001e6e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d6c:	4b42      	ldr	r3, [pc, #264]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 030c 	and.w	r3, r3, #12
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d061      	beq.n	8001e3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d146      	bne.n	8001e0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d80:	4b3f      	ldr	r3, [pc, #252]	; (8001e80 <HAL_RCC_OscConfig+0x4fc>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d86:	f7ff f859 	bl	8000e3c <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8e:	f7ff f855 	bl	8000e3c <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e067      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da0:	4b35      	ldr	r3, [pc, #212]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1f0      	bne.n	8001d8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db4:	d108      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001db6:	4b30      	ldr	r3, [pc, #192]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	492d      	ldr	r1, [pc, #180]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc8:	4b2b      	ldr	r3, [pc, #172]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a19      	ldr	r1, [r3, #32]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	4927      	ldr	r1, [pc, #156]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de0:	4b27      	ldr	r3, [pc, #156]	; (8001e80 <HAL_RCC_OscConfig+0x4fc>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de6:	f7ff f829 	bl	8000e3c <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dee:	f7ff f825 	bl	8000e3c <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e037      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e00:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0f0      	beq.n	8001dee <HAL_RCC_OscConfig+0x46a>
 8001e0c:	e02f      	b.n	8001e6e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0e:	4b1c      	ldr	r3, [pc, #112]	; (8001e80 <HAL_RCC_OscConfig+0x4fc>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e14:	f7ff f812 	bl	8000e3c <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1c:	f7ff f80e 	bl	8000e3c <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e020      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e2e:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0x498>
 8001e3a:	e018      	b.n	8001e6e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d101      	bne.n	8001e48 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e013      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d106      	bne.n	8001e6a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d001      	beq.n	8001e6e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40007000 	.word	0x40007000
 8001e80:	42420060 	.word	0x42420060

08001e84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0d0      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e98:	4b6a      	ldr	r3, [pc, #424]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d910      	bls.n	8001ec8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea6:	4b67      	ldr	r3, [pc, #412]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 0207 	bic.w	r2, r3, #7
 8001eae:	4965      	ldr	r1, [pc, #404]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb6:	4b63      	ldr	r3, [pc, #396]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d001      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0b8      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d020      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ee0:	4b59      	ldr	r3, [pc, #356]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	4a58      	ldr	r2, [pc, #352]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ef8:	4b53      	ldr	r3, [pc, #332]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4a52      	ldr	r2, [pc, #328]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f04:	4b50      	ldr	r3, [pc, #320]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	494d      	ldr	r1, [pc, #308]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d040      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d107      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2a:	4b47      	ldr	r3, [pc, #284]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d115      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e07f      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f42:	4b41      	ldr	r3, [pc, #260]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d109      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e073      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f52:	4b3d      	ldr	r3, [pc, #244]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e06b      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f62:	4b39      	ldr	r3, [pc, #228]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f023 0203 	bic.w	r2, r3, #3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4936      	ldr	r1, [pc, #216]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f74:	f7fe ff62 	bl	8000e3c <HAL_GetTick>
 8001f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7c:	f7fe ff5e 	bl	8000e3c <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e053      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	4b2d      	ldr	r3, [pc, #180]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 020c 	and.w	r2, r3, #12
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d1eb      	bne.n	8001f7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b27      	ldr	r3, [pc, #156]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d210      	bcs.n	8001fd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b24      	ldr	r3, [pc, #144]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 0207 	bic.w	r2, r3, #7
 8001fba:	4922      	ldr	r1, [pc, #136]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc2:	4b20      	ldr	r3, [pc, #128]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e032      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe0:	4b19      	ldr	r3, [pc, #100]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	4916      	ldr	r1, [pc, #88]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d009      	beq.n	8002012 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ffe:	4b12      	ldr	r3, [pc, #72]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	490e      	ldr	r1, [pc, #56]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002012:	f000 f821 	bl	8002058 <HAL_RCC_GetSysClockFreq>
 8002016:	4602      	mov	r2, r0
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	490a      	ldr	r1, [pc, #40]	; (800204c <HAL_RCC_ClockConfig+0x1c8>)
 8002024:	5ccb      	ldrb	r3, [r1, r3]
 8002026:	fa22 f303 	lsr.w	r3, r2, r3
 800202a:	4a09      	ldr	r2, [pc, #36]	; (8002050 <HAL_RCC_ClockConfig+0x1cc>)
 800202c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <HAL_RCC_ClockConfig+0x1d0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe fec0 	bl	8000db8 <HAL_InitTick>

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40022000 	.word	0x40022000
 8002048:	40021000 	.word	0x40021000
 800204c:	0800384c 	.word	0x0800384c
 8002050:	20000000 	.word	0x20000000
 8002054:	20000004 	.word	0x20000004

08002058 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002058:	b480      	push	{r7}
 800205a:	b087      	sub	sp, #28
 800205c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	2300      	movs	r3, #0
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	2300      	movs	r3, #0
 800206c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002072:	4b1e      	ldr	r3, [pc, #120]	; (80020ec <HAL_RCC_GetSysClockFreq+0x94>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b04      	cmp	r3, #4
 8002080:	d002      	beq.n	8002088 <HAL_RCC_GetSysClockFreq+0x30>
 8002082:	2b08      	cmp	r3, #8
 8002084:	d003      	beq.n	800208e <HAL_RCC_GetSysClockFreq+0x36>
 8002086:	e027      	b.n	80020d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002088:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800208a:	613b      	str	r3, [r7, #16]
      break;
 800208c:	e027      	b.n	80020de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	0c9b      	lsrs	r3, r3, #18
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	4a17      	ldr	r2, [pc, #92]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002098:	5cd3      	ldrb	r3, [r2, r3]
 800209a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d010      	beq.n	80020c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020a6:	4b11      	ldr	r3, [pc, #68]	; (80020ec <HAL_RCC_GetSysClockFreq+0x94>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	0c5b      	lsrs	r3, r3, #17
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	4a11      	ldr	r2, [pc, #68]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020b2:	5cd3      	ldrb	r3, [r2, r3]
 80020b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a0d      	ldr	r2, [pc, #52]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80020ba:	fb02 f203 	mul.w	r2, r2, r3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	e004      	b.n	80020d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a0c      	ldr	r2, [pc, #48]	; (80020fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80020cc:	fb02 f303 	mul.w	r3, r2, r3
 80020d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	613b      	str	r3, [r7, #16]
      break;
 80020d6:	e002      	b.n	80020de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80020da:	613b      	str	r3, [r7, #16]
      break;
 80020dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020de:	693b      	ldr	r3, [r7, #16]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	371c      	adds	r7, #28
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000
 80020f0:	007a1200 	.word	0x007a1200
 80020f4:	08003864 	.word	0x08003864
 80020f8:	08003874 	.word	0x08003874
 80020fc:	003d0900 	.word	0x003d0900

08002100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002104:	4b02      	ldr	r3, [pc, #8]	; (8002110 <HAL_RCC_GetHCLKFreq+0x10>)
 8002106:	681b      	ldr	r3, [r3, #0]
}
 8002108:	4618      	mov	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr
 8002110:	20000000 	.word	0x20000000

08002114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002118:	f7ff fff2 	bl	8002100 <HAL_RCC_GetHCLKFreq>
 800211c:	4602      	mov	r2, r0
 800211e:	4b05      	ldr	r3, [pc, #20]	; (8002134 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	0a1b      	lsrs	r3, r3, #8
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	4903      	ldr	r1, [pc, #12]	; (8002138 <HAL_RCC_GetPCLK1Freq+0x24>)
 800212a:	5ccb      	ldrb	r3, [r1, r3]
 800212c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002130:	4618      	mov	r0, r3
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40021000 	.word	0x40021000
 8002138:	0800385c 	.word	0x0800385c

0800213c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002140:	f7ff ffde 	bl	8002100 <HAL_RCC_GetHCLKFreq>
 8002144:	4602      	mov	r2, r0
 8002146:	4b05      	ldr	r3, [pc, #20]	; (800215c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	0adb      	lsrs	r3, r3, #11
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	4903      	ldr	r1, [pc, #12]	; (8002160 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002152:	5ccb      	ldrb	r3, [r1, r3]
 8002154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002158:	4618      	mov	r0, r3
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40021000 	.word	0x40021000
 8002160:	0800385c 	.word	0x0800385c

08002164 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800216c:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <RCC_Delay+0x34>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a0a      	ldr	r2, [pc, #40]	; (800219c <RCC_Delay+0x38>)
 8002172:	fba2 2303 	umull	r2, r3, r2, r3
 8002176:	0a5b      	lsrs	r3, r3, #9
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	fb02 f303 	mul.w	r3, r2, r3
 800217e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002180:	bf00      	nop
  }
  while (Delay --);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	1e5a      	subs	r2, r3, #1
 8002186:	60fa      	str	r2, [r7, #12]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1f9      	bne.n	8002180 <RCC_Delay+0x1c>
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	20000000 	.word	0x20000000
 800219c:	10624dd3 	.word	0x10624dd3

080021a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	2300      	movs	r3, #0
 80021ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d07d      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80021bc:	2300      	movs	r3, #0
 80021be:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c0:	4b4f      	ldr	r3, [pc, #316]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021c2:	69db      	ldr	r3, [r3, #28]
 80021c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10d      	bne.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021cc:	4b4c      	ldr	r3, [pc, #304]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	4a4b      	ldr	r2, [pc, #300]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d6:	61d3      	str	r3, [r2, #28]
 80021d8:	4b49      	ldr	r3, [pc, #292]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021e4:	2301      	movs	r3, #1
 80021e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e8:	4b46      	ldr	r3, [pc, #280]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d118      	bne.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021f4:	4b43      	ldr	r3, [pc, #268]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a42      	ldr	r2, [pc, #264]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002200:	f7fe fe1c 	bl	8000e3c <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002206:	e008      	b.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002208:	f7fe fe18 	bl	8000e3c <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b64      	cmp	r3, #100	; 0x64
 8002214:	d901      	bls.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e06d      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221a:	4b3a      	ldr	r3, [pc, #232]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f0      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002226:	4b36      	ldr	r3, [pc, #216]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800222e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d02e      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	429a      	cmp	r2, r3
 8002242:	d027      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002244:	4b2e      	ldr	r3, [pc, #184]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800224c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800224e:	4b2e      	ldr	r3, [pc, #184]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002250:	2201      	movs	r2, #1
 8002252:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002254:	4b2c      	ldr	r3, [pc, #176]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800225a:	4a29      	ldr	r2, [pc, #164]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d014      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226a:	f7fe fde7 	bl	8000e3c <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002270:	e00a      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002272:	f7fe fde3 	bl	8000e3c <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002280:	4293      	cmp	r3, r2
 8002282:	d901      	bls.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e036      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002288:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0ee      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002294:	4b1a      	ldr	r3, [pc, #104]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4917      	ldr	r1, [pc, #92]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022a6:	7dfb      	ldrb	r3, [r7, #23]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d105      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ac:	4b14      	ldr	r3, [pc, #80]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	4a13      	ldr	r2, [pc, #76]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d008      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022c4:	4b0e      	ldr	r3, [pc, #56]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	490b      	ldr	r1, [pc, #44]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0310 	and.w	r3, r3, #16
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d008      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022e2:	4b07      	ldr	r3, [pc, #28]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	4904      	ldr	r1, [pc, #16]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40021000 	.word	0x40021000
 8002304:	40007000 	.word	0x40007000
 8002308:	42420440 	.word	0x42420440

0800230c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e041      	b.n	80023a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d106      	bne.n	8002338 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7fe fc4c 	bl	8000bd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2202      	movs	r2, #2
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3304      	adds	r3, #4
 8002348:	4619      	mov	r1, r3
 800234a:	4610      	mov	r0, r2
 800234c:	f000 fa6e 	bl	800282c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d001      	beq.n	80023c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e035      	b.n	8002430 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a16      	ldr	r2, [pc, #88]	; (800243c <HAL_TIM_Base_Start_IT+0x90>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d009      	beq.n	80023fa <HAL_TIM_Base_Start_IT+0x4e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ee:	d004      	beq.n	80023fa <HAL_TIM_Base_Start_IT+0x4e>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a12      	ldr	r2, [pc, #72]	; (8002440 <HAL_TIM_Base_Start_IT+0x94>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d111      	bne.n	800241e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2b06      	cmp	r3, #6
 800240a:	d010      	beq.n	800242e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800241c:	e007      	b.n	800242e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f042 0201 	orr.w	r2, r2, #1
 800242c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40012c00 	.word	0x40012c00
 8002440:	40000400 	.word	0x40000400

08002444 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b02      	cmp	r3, #2
 8002458:	d122      	bne.n	80024a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b02      	cmp	r3, #2
 8002466:	d11b      	bne.n	80024a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f06f 0202 	mvn.w	r2, #2
 8002470:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f9b4 	bl	80027f4 <HAL_TIM_IC_CaptureCallback>
 800248c:	e005      	b.n	800249a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f9a7 	bl	80027e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f9b6 	bl	8002806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d122      	bne.n	80024f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d11b      	bne.n	80024f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f06f 0204 	mvn.w	r2, #4
 80024c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2202      	movs	r2, #2
 80024ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f98a 	bl	80027f4 <HAL_TIM_IC_CaptureCallback>
 80024e0:	e005      	b.n	80024ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f97d 	bl	80027e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 f98c 	bl	8002806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d122      	bne.n	8002548 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	2b08      	cmp	r3, #8
 800250e:	d11b      	bne.n	8002548 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f06f 0208 	mvn.w	r2, #8
 8002518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2204      	movs	r2, #4
 800251e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f960 	bl	80027f4 <HAL_TIM_IC_CaptureCallback>
 8002534:	e005      	b.n	8002542 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f953 	bl	80027e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 f962 	bl	8002806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	f003 0310 	and.w	r3, r3, #16
 8002552:	2b10      	cmp	r3, #16
 8002554:	d122      	bne.n	800259c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f003 0310 	and.w	r3, r3, #16
 8002560:	2b10      	cmp	r3, #16
 8002562:	d11b      	bne.n	800259c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f06f 0210 	mvn.w	r2, #16
 800256c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2208      	movs	r2, #8
 8002572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f936 	bl	80027f4 <HAL_TIM_IC_CaptureCallback>
 8002588:	e005      	b.n	8002596 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f929 	bl	80027e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 f938 	bl	8002806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d10e      	bne.n	80025c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d107      	bne.n	80025c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f06f 0201 	mvn.w	r2, #1
 80025c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7fd ff8c 	bl	80004e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d2:	2b80      	cmp	r3, #128	; 0x80
 80025d4:	d10e      	bne.n	80025f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e0:	2b80      	cmp	r3, #128	; 0x80
 80025e2:	d107      	bne.n	80025f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 fa6b 	bl	8002aca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fe:	2b40      	cmp	r3, #64	; 0x40
 8002600:	d10e      	bne.n	8002620 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260c:	2b40      	cmp	r3, #64	; 0x40
 800260e:	d107      	bne.n	8002620 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f8fc 	bl	8002818 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	f003 0320 	and.w	r3, r3, #32
 800262a:	2b20      	cmp	r3, #32
 800262c:	d10e      	bne.n	800264c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f003 0320 	and.w	r3, r3, #32
 8002638:	2b20      	cmp	r3, #32
 800263a:	d107      	bne.n	800264c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f06f 0220 	mvn.w	r2, #32
 8002644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 fa36 	bl	8002ab8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800264c:	bf00      	nop
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800265e:	2300      	movs	r3, #0
 8002660:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <HAL_TIM_ConfigClockSource+0x1c>
 800266c:	2302      	movs	r3, #2
 800266e:	e0b4      	b.n	80027da <HAL_TIM_ConfigClockSource+0x186>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2202      	movs	r2, #2
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800268e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002696:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026a8:	d03e      	beq.n	8002728 <HAL_TIM_ConfigClockSource+0xd4>
 80026aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ae:	f200 8087 	bhi.w	80027c0 <HAL_TIM_ConfigClockSource+0x16c>
 80026b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026b6:	f000 8086 	beq.w	80027c6 <HAL_TIM_ConfigClockSource+0x172>
 80026ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026be:	d87f      	bhi.n	80027c0 <HAL_TIM_ConfigClockSource+0x16c>
 80026c0:	2b70      	cmp	r3, #112	; 0x70
 80026c2:	d01a      	beq.n	80026fa <HAL_TIM_ConfigClockSource+0xa6>
 80026c4:	2b70      	cmp	r3, #112	; 0x70
 80026c6:	d87b      	bhi.n	80027c0 <HAL_TIM_ConfigClockSource+0x16c>
 80026c8:	2b60      	cmp	r3, #96	; 0x60
 80026ca:	d050      	beq.n	800276e <HAL_TIM_ConfigClockSource+0x11a>
 80026cc:	2b60      	cmp	r3, #96	; 0x60
 80026ce:	d877      	bhi.n	80027c0 <HAL_TIM_ConfigClockSource+0x16c>
 80026d0:	2b50      	cmp	r3, #80	; 0x50
 80026d2:	d03c      	beq.n	800274e <HAL_TIM_ConfigClockSource+0xfa>
 80026d4:	2b50      	cmp	r3, #80	; 0x50
 80026d6:	d873      	bhi.n	80027c0 <HAL_TIM_ConfigClockSource+0x16c>
 80026d8:	2b40      	cmp	r3, #64	; 0x40
 80026da:	d058      	beq.n	800278e <HAL_TIM_ConfigClockSource+0x13a>
 80026dc:	2b40      	cmp	r3, #64	; 0x40
 80026de:	d86f      	bhi.n	80027c0 <HAL_TIM_ConfigClockSource+0x16c>
 80026e0:	2b30      	cmp	r3, #48	; 0x30
 80026e2:	d064      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0x15a>
 80026e4:	2b30      	cmp	r3, #48	; 0x30
 80026e6:	d86b      	bhi.n	80027c0 <HAL_TIM_ConfigClockSource+0x16c>
 80026e8:	2b20      	cmp	r3, #32
 80026ea:	d060      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0x15a>
 80026ec:	2b20      	cmp	r3, #32
 80026ee:	d867      	bhi.n	80027c0 <HAL_TIM_ConfigClockSource+0x16c>
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d05c      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0x15a>
 80026f4:	2b10      	cmp	r3, #16
 80026f6:	d05a      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0x15a>
 80026f8:	e062      	b.n	80027c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	6899      	ldr	r1, [r3, #8]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f000 f95e 	bl	80029ca <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800271c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	609a      	str	r2, [r3, #8]
      break;
 8002726:	e04f      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6818      	ldr	r0, [r3, #0]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	6899      	ldr	r1, [r3, #8]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f000 f947 	bl	80029ca <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800274a:	609a      	str	r2, [r3, #8]
      break;
 800274c:	e03c      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	6859      	ldr	r1, [r3, #4]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	461a      	mov	r2, r3
 800275c:	f000 f8be 	bl	80028dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2150      	movs	r1, #80	; 0x50
 8002766:	4618      	mov	r0, r3
 8002768:	f000 f915 	bl	8002996 <TIM_ITRx_SetConfig>
      break;
 800276c:	e02c      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6818      	ldr	r0, [r3, #0]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6859      	ldr	r1, [r3, #4]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	461a      	mov	r2, r3
 800277c:	f000 f8dc 	bl	8002938 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2160      	movs	r1, #96	; 0x60
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f905 	bl	8002996 <TIM_ITRx_SetConfig>
      break;
 800278c:	e01c      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	6859      	ldr	r1, [r3, #4]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	461a      	mov	r2, r3
 800279c:	f000 f89e 	bl	80028dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2140      	movs	r1, #64	; 0x40
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 f8f5 	bl	8002996 <TIM_ITRx_SetConfig>
      break;
 80027ac:	e00c      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4619      	mov	r1, r3
 80027b8:	4610      	mov	r0, r2
 80027ba:	f000 f8ec 	bl	8002996 <TIM_ITRx_SetConfig>
      break;
 80027be:	e003      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
      break;
 80027c4:	e000      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80027c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr

08002806 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr

08002818 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr
	...

0800282c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a25      	ldr	r2, [pc, #148]	; (80028d4 <TIM_Base_SetConfig+0xa8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d007      	beq.n	8002854 <TIM_Base_SetConfig+0x28>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800284a:	d003      	beq.n	8002854 <TIM_Base_SetConfig+0x28>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a22      	ldr	r2, [pc, #136]	; (80028d8 <TIM_Base_SetConfig+0xac>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d108      	bne.n	8002866 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800285a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	4313      	orrs	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a1a      	ldr	r2, [pc, #104]	; (80028d4 <TIM_Base_SetConfig+0xa8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d007      	beq.n	800287e <TIM_Base_SetConfig+0x52>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002874:	d003      	beq.n	800287e <TIM_Base_SetConfig+0x52>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a17      	ldr	r2, [pc, #92]	; (80028d8 <TIM_Base_SetConfig+0xac>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d108      	bne.n	8002890 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	4313      	orrs	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	4313      	orrs	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a07      	ldr	r2, [pc, #28]	; (80028d4 <TIM_Base_SetConfig+0xa8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d103      	bne.n	80028c4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	615a      	str	r2, [r3, #20]
}
 80028ca:	bf00      	nop
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	40012c00 	.word	0x40012c00
 80028d8:	40000400 	.word	0x40000400

080028dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028dc:	b480      	push	{r7}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	f023 0201 	bic.w	r2, r3, #1
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002906:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f023 030a 	bic.w	r3, r3, #10
 8002918:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	4313      	orrs	r3, r2
 8002920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	621a      	str	r2, [r3, #32]
}
 800292e:	bf00      	nop
 8002930:	371c      	adds	r7, #28
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002938:	b480      	push	{r7}
 800293a:	b087      	sub	sp, #28
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	f023 0210 	bic.w	r2, r3, #16
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	031b      	lsls	r3, r3, #12
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002974:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	621a      	str	r2, [r3, #32]
}
 800298c:	bf00      	nop
 800298e:	371c      	adds	r7, #28
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr

08002996 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002996:	b480      	push	{r7}
 8002998:	b085      	sub	sp, #20
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f043 0307 	orr.w	r3, r3, #7
 80029b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	609a      	str	r2, [r3, #8]
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b087      	sub	sp, #28
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	60f8      	str	r0, [r7, #12]
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	021a      	lsls	r2, r3, #8
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	431a      	orrs	r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	609a      	str	r2, [r3, #8]
}
 80029fe:	bf00      	nop
 8002a00:	371c      	adds	r7, #28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e041      	b.n	8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a14      	ldr	r2, [pc, #80]	; (8002ab0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d009      	beq.n	8002a78 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a6c:	d004      	beq.n	8002a78 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a10      	ldr	r2, [pc, #64]	; (8002ab4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d10c      	bne.n	8002a92 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40012c00 	.word	0x40012c00
 8002ab4:	40000400 	.word	0x40000400

08002ab8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr

08002aca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr

08002adc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e042      	b.n	8002b74 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d106      	bne.n	8002b08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7fe f888 	bl	8000c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2224      	movs	r2, #36	; 0x24
 8002b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68da      	ldr	r2, [r3, #12]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 fdc5 	bl	80036b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695a      	ldr	r2, [r3, #20]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68da      	ldr	r2, [r3, #12]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2220      	movs	r2, #32
 8002b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08a      	sub	sp, #40	; 0x28
 8002b80:	af02      	add	r7, sp, #8
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	d16d      	bne.n	8002c78 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d002      	beq.n	8002ba8 <HAL_UART_Transmit+0x2c>
 8002ba2:	88fb      	ldrh	r3, [r7, #6]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e066      	b.n	8002c7a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2221      	movs	r2, #33	; 0x21
 8002bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bba:	f7fe f93f 	bl	8000e3c <HAL_GetTick>
 8002bbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	88fa      	ldrh	r2, [r7, #6]
 8002bc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	88fa      	ldrh	r2, [r7, #6]
 8002bca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd4:	d108      	bne.n	8002be8 <HAL_UART_Transmit+0x6c>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d104      	bne.n	8002be8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	61bb      	str	r3, [r7, #24]
 8002be6:	e003      	b.n	8002bf0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002bf0:	e02a      	b.n	8002c48 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	2180      	movs	r1, #128	; 0x80
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f000 fb14 	bl	800322a <UART_WaitOnFlagUntilTimeout>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e036      	b.n	8002c7a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10b      	bne.n	8002c2a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	881b      	ldrh	r3, [r3, #0]
 8002c16:	461a      	mov	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	3302      	adds	r3, #2
 8002c26:	61bb      	str	r3, [r7, #24]
 8002c28:	e007      	b.n	8002c3a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	781a      	ldrb	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	3301      	adds	r3, #1
 8002c38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1cf      	bne.n	8002bf2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	2140      	movs	r1, #64	; 0x40
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 fae4 	bl	800322a <UART_WaitOnFlagUntilTimeout>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e006      	b.n	8002c7a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002c74:	2300      	movs	r3, #0
 8002c76:	e000      	b.n	8002c7a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002c78:	2302      	movs	r3, #2
  }
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3720      	adds	r7, #32
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	d112      	bne.n	8002cc2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <HAL_UART_Receive_IT+0x26>
 8002ca2:	88fb      	ldrh	r3, [r7, #6]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e00b      	b.n	8002cc4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002cb2:	88fb      	ldrh	r3, [r7, #6]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	68b9      	ldr	r1, [r7, #8]
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 fb24 	bl	8003306 <UART_Start_Receive_IT>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	e000      	b.n	8002cc4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002cc2:	2302      	movs	r3, #2
  }
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b0ba      	sub	sp, #232	; 0xe8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002d0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10f      	bne.n	8002d32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d16:	f003 0320 	and.w	r3, r3, #32
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d009      	beq.n	8002d32 <HAL_UART_IRQHandler+0x66>
 8002d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d22:	f003 0320 	and.w	r3, r3, #32
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 fc01 	bl	8003532 <UART_Receive_IT>
      return;
 8002d30:	e25b      	b.n	80031ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002d32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 80de 	beq.w	8002ef8 <HAL_UART_IRQHandler+0x22c>
 8002d3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d106      	bne.n	8002d56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 80d1 	beq.w	8002ef8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00b      	beq.n	8002d7a <HAL_UART_IRQHandler+0xae>
 8002d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d005      	beq.n	8002d7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d72:	f043 0201 	orr.w	r2, r3, #1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00b      	beq.n	8002d9e <HAL_UART_IRQHandler+0xd2>
 8002d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d005      	beq.n	8002d9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	f043 0202 	orr.w	r2, r3, #2
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00b      	beq.n	8002dc2 <HAL_UART_IRQHandler+0xf6>
 8002daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d005      	beq.n	8002dc2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	f043 0204 	orr.w	r2, r3, #4
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d011      	beq.n	8002df2 <HAL_UART_IRQHandler+0x126>
 8002dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dd2:	f003 0320 	and.w	r3, r3, #32
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d105      	bne.n	8002de6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002dda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d005      	beq.n	8002df2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dea:	f043 0208 	orr.w	r2, r3, #8
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 81f2 	beq.w	80031e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e00:	f003 0320 	and.w	r3, r3, #32
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d008      	beq.n	8002e1a <HAL_UART_IRQHandler+0x14e>
 8002e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e0c:	f003 0320 	and.w	r3, r3, #32
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fb8c 	bl	8003532 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	bf14      	ite	ne
 8002e28:	2301      	movne	r3, #1
 8002e2a:	2300      	moveq	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d103      	bne.n	8002e46 <HAL_UART_IRQHandler+0x17a>
 8002e3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d04f      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 fa96 	bl	8003378 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d041      	beq.n	8002ede <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	3314      	adds	r3, #20
 8002e60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e68:	e853 3f00 	ldrex	r3, [r3]
 8002e6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	3314      	adds	r3, #20
 8002e82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e96:	e841 2300 	strex	r3, r2, [r1]
 8002e9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1d9      	bne.n	8002e5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d013      	beq.n	8002ed6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb2:	4a7e      	ldr	r2, [pc, #504]	; (80030ac <HAL_UART_IRQHandler+0x3e0>)
 8002eb4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fe fb22 	bl	8001504 <HAL_DMA_Abort_IT>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d016      	beq.n	8002ef4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ed4:	e00e      	b.n	8002ef4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f993 	bl	8003202 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002edc:	e00a      	b.n	8002ef4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f98f 	bl	8003202 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee4:	e006      	b.n	8002ef4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f98b 	bl	8003202 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002ef2:	e175      	b.n	80031e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef4:	bf00      	nop
    return;
 8002ef6:	e173      	b.n	80031e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	f040 814f 	bne.w	80031a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 8148 	beq.w	80031a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f14:	f003 0310 	and.w	r3, r3, #16
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 8141 	beq.w	80031a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	60bb      	str	r3, [r7, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 80b6 	beq.w	80030b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 8145 	beq.w	80031e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f62:	429a      	cmp	r2, r3
 8002f64:	f080 813e 	bcs.w	80031e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f6e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	2b20      	cmp	r3, #32
 8002f78:	f000 8088 	beq.w	800308c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	330c      	adds	r3, #12
 8002f82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f8a:	e853 3f00 	ldrex	r3, [r3]
 8002f8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	330c      	adds	r3, #12
 8002fa4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002fa8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002fac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002fb4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002fb8:	e841 2300 	strex	r3, r2, [r1]
 8002fbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002fc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1d9      	bne.n	8002f7c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	3314      	adds	r3, #20
 8002fce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fd2:	e853 3f00 	ldrex	r3, [r3]
 8002fd6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002fd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fda:	f023 0301 	bic.w	r3, r3, #1
 8002fde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	3314      	adds	r3, #20
 8002fe8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ff0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ff4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ff8:	e841 2300 	strex	r3, r2, [r1]
 8002ffc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ffe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1e1      	bne.n	8002fc8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	3314      	adds	r3, #20
 800300a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800300e:	e853 3f00 	ldrex	r3, [r3]
 8003012:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003014:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800301a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	3314      	adds	r3, #20
 8003024:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003028:	66fa      	str	r2, [r7, #108]	; 0x6c
 800302a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800302e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003030:	e841 2300 	strex	r3, r2, [r1]
 8003034:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003036:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1e3      	bne.n	8003004 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	330c      	adds	r3, #12
 8003050:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003054:	e853 3f00 	ldrex	r3, [r3]
 8003058:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800305a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800305c:	f023 0310 	bic.w	r3, r3, #16
 8003060:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	330c      	adds	r3, #12
 800306a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800306e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003070:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003072:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003074:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003076:	e841 2300 	strex	r3, r2, [r1]
 800307a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800307c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1e3      	bne.n	800304a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe fa01 	bl	800148e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800309a:	b29b      	uxth	r3, r3
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	b29b      	uxth	r3, r3
 80030a0:	4619      	mov	r1, r3
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f8b6 	bl	8003214 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030a8:	e09c      	b.n	80031e4 <HAL_UART_IRQHandler+0x518>
 80030aa:	bf00      	nop
 80030ac:	0800343d 	.word	0x0800343d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 808e 	beq.w	80031e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80030cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 8089 	beq.w	80031e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	330c      	adds	r3, #12
 80030dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e0:	e853 3f00 	ldrex	r3, [r3]
 80030e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80030e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	330c      	adds	r3, #12
 80030f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80030fa:	647a      	str	r2, [r7, #68]	; 0x44
 80030fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003100:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003102:	e841 2300 	strex	r3, r2, [r1]
 8003106:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1e3      	bne.n	80030d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	3314      	adds	r3, #20
 8003114:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	e853 3f00 	ldrex	r3, [r3]
 800311c:	623b      	str	r3, [r7, #32]
   return(result);
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	f023 0301 	bic.w	r3, r3, #1
 8003124:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3314      	adds	r3, #20
 800312e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003132:	633a      	str	r2, [r7, #48]	; 0x30
 8003134:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003136:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800313a:	e841 2300 	strex	r3, r2, [r1]
 800313e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1e3      	bne.n	800310e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	330c      	adds	r3, #12
 800315a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	e853 3f00 	ldrex	r3, [r3]
 8003162:	60fb      	str	r3, [r7, #12]
   return(result);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f023 0310 	bic.w	r3, r3, #16
 800316a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	330c      	adds	r3, #12
 8003174:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003178:	61fa      	str	r2, [r7, #28]
 800317a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317c:	69b9      	ldr	r1, [r7, #24]
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	e841 2300 	strex	r3, r2, [r1]
 8003184:	617b      	str	r3, [r7, #20]
   return(result);
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1e3      	bne.n	8003154 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003192:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003196:	4619      	mov	r1, r3
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f83b 	bl	8003214 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800319e:	e023      	b.n	80031e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80031a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d009      	beq.n	80031c0 <HAL_UART_IRQHandler+0x4f4>
 80031ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f953 	bl	8003464 <UART_Transmit_IT>
    return;
 80031be:	e014      	b.n	80031ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80031c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00e      	beq.n	80031ea <HAL_UART_IRQHandler+0x51e>
 80031cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d008      	beq.n	80031ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f992 	bl	8003502 <UART_EndTransmit_IT>
    return;
 80031de:	e004      	b.n	80031ea <HAL_UART_IRQHandler+0x51e>
    return;
 80031e0:	bf00      	nop
 80031e2:	e002      	b.n	80031ea <HAL_UART_IRQHandler+0x51e>
      return;
 80031e4:	bf00      	nop
 80031e6:	e000      	b.n	80031ea <HAL_UART_IRQHandler+0x51e>
      return;
 80031e8:	bf00      	nop
  }
}
 80031ea:	37e8      	adds	r7, #232	; 0xe8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr

08003202 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	bc80      	pop	{r7}
 8003228:	4770      	bx	lr

0800322a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b090      	sub	sp, #64	; 0x40
 800322e:	af00      	add	r7, sp, #0
 8003230:	60f8      	str	r0, [r7, #12]
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	603b      	str	r3, [r7, #0]
 8003236:	4613      	mov	r3, r2
 8003238:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800323a:	e050      	b.n	80032de <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800323c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800323e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003242:	d04c      	beq.n	80032de <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003246:	2b00      	cmp	r3, #0
 8003248:	d007      	beq.n	800325a <UART_WaitOnFlagUntilTimeout+0x30>
 800324a:	f7fd fdf7 	bl	8000e3c <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003256:	429a      	cmp	r2, r3
 8003258:	d241      	bcs.n	80032de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	330c      	adds	r3, #12
 8003260:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003264:	e853 3f00 	ldrex	r3, [r3]
 8003268:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003270:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	330c      	adds	r3, #12
 8003278:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800327a:	637a      	str	r2, [r7, #52]	; 0x34
 800327c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003280:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003282:	e841 2300 	strex	r3, r2, [r1]
 8003286:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1e5      	bne.n	800325a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	3314      	adds	r3, #20
 8003294:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	e853 3f00 	ldrex	r3, [r3]
 800329c:	613b      	str	r3, [r7, #16]
   return(result);
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	f023 0301 	bic.w	r3, r3, #1
 80032a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	3314      	adds	r3, #20
 80032ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032ae:	623a      	str	r2, [r7, #32]
 80032b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b2:	69f9      	ldr	r1, [r7, #28]
 80032b4:	6a3a      	ldr	r2, [r7, #32]
 80032b6:	e841 2300 	strex	r3, r2, [r1]
 80032ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1e5      	bne.n	800328e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2220      	movs	r2, #32
 80032c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2220      	movs	r2, #32
 80032ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e00f      	b.n	80032fe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	4013      	ands	r3, r2
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	bf0c      	ite	eq
 80032ee:	2301      	moveq	r3, #1
 80032f0:	2300      	movne	r3, #0
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	461a      	mov	r2, r3
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d09f      	beq.n	800323c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3740      	adds	r7, #64	; 0x40
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003306:	b480      	push	{r7}
 8003308:	b085      	sub	sp, #20
 800330a:	af00      	add	r7, sp, #0
 800330c:	60f8      	str	r0, [r7, #12]
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	4613      	mov	r3, r2
 8003312:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	88fa      	ldrh	r2, [r7, #6]
 800331e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	88fa      	ldrh	r2, [r7, #6]
 8003324:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2222      	movs	r2, #34	; 0x22
 8003330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d007      	beq.n	800334c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800334a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695a      	ldr	r2, [r3, #20]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0220 	orr.w	r2, r2, #32
 800336a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr

08003378 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003378:	b480      	push	{r7}
 800337a:	b095      	sub	sp, #84	; 0x54
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	330c      	adds	r3, #12
 8003386:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800338a:	e853 3f00 	ldrex	r3, [r3]
 800338e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003392:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003396:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	330c      	adds	r3, #12
 800339e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033a0:	643a      	str	r2, [r7, #64]	; 0x40
 80033a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80033a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033a8:	e841 2300 	strex	r3, r2, [r1]
 80033ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1e5      	bne.n	8003380 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3314      	adds	r3, #20
 80033ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	e853 3f00 	ldrex	r3, [r3]
 80033c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	f023 0301 	bic.w	r3, r3, #1
 80033ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3314      	adds	r3, #20
 80033d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033dc:	e841 2300 	strex	r3, r2, [r1]
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1e5      	bne.n	80033b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d119      	bne.n	8003424 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	330c      	adds	r3, #12
 80033f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	e853 3f00 	ldrex	r3, [r3]
 80033fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f023 0310 	bic.w	r3, r3, #16
 8003406:	647b      	str	r3, [r7, #68]	; 0x44
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	330c      	adds	r3, #12
 800340e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003410:	61ba      	str	r2, [r7, #24]
 8003412:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003414:	6979      	ldr	r1, [r7, #20]
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	e841 2300 	strex	r3, r2, [r1]
 800341c:	613b      	str	r3, [r7, #16]
   return(result);
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1e5      	bne.n	80033f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003432:	bf00      	nop
 8003434:	3754      	adds	r7, #84	; 0x54
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr

0800343c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f7ff fed3 	bl	8003202 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800345c:	bf00      	nop
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b21      	cmp	r3, #33	; 0x21
 8003476:	d13e      	bne.n	80034f6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003480:	d114      	bne.n	80034ac <UART_Transmit_IT+0x48>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d110      	bne.n	80034ac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	881b      	ldrh	r3, [r3, #0]
 8003494:	461a      	mov	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800349e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	1c9a      	adds	r2, r3, #2
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	621a      	str	r2, [r3, #32]
 80034aa:	e008      	b.n	80034be <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	1c59      	adds	r1, r3, #1
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6211      	str	r1, [r2, #32]
 80034b6:	781a      	ldrb	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	4619      	mov	r1, r3
 80034cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10f      	bne.n	80034f2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034f2:	2300      	movs	r3, #0
 80034f4:	e000      	b.n	80034f8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034f6:	2302      	movs	r3, #2
  }
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc80      	pop	{r7}
 8003500:	4770      	bx	lr

08003502 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003518:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2220      	movs	r2, #32
 800351e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7ff fe64 	bl	80031f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b08c      	sub	sp, #48	; 0x30
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b22      	cmp	r3, #34	; 0x22
 8003544:	f040 80ae 	bne.w	80036a4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003550:	d117      	bne.n	8003582 <UART_Receive_IT+0x50>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d113      	bne.n	8003582 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800355a:	2300      	movs	r3, #0
 800355c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003562:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	b29b      	uxth	r3, r3
 800356c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003570:	b29a      	uxth	r2, r3
 8003572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003574:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357a:	1c9a      	adds	r2, r3, #2
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	629a      	str	r2, [r3, #40]	; 0x28
 8003580:	e026      	b.n	80035d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003586:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003588:	2300      	movs	r3, #0
 800358a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003594:	d007      	beq.n	80035a6 <UART_Receive_IT+0x74>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10a      	bne.n	80035b4 <UART_Receive_IT+0x82>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d106      	bne.n	80035b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b0:	701a      	strb	r2, [r3, #0]
 80035b2:	e008      	b.n	80035c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ca:	1c5a      	adds	r2, r3, #1
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	3b01      	subs	r3, #1
 80035d8:	b29b      	uxth	r3, r3
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	4619      	mov	r1, r3
 80035de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d15d      	bne.n	80036a0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0220 	bic.w	r2, r2, #32
 80035f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003602:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695a      	ldr	r2, [r3, #20]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0201 	bic.w	r2, r2, #1
 8003612:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	2b01      	cmp	r3, #1
 8003628:	d135      	bne.n	8003696 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	330c      	adds	r3, #12
 8003636:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	e853 3f00 	ldrex	r3, [r3]
 800363e:	613b      	str	r3, [r7, #16]
   return(result);
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	f023 0310 	bic.w	r3, r3, #16
 8003646:	627b      	str	r3, [r7, #36]	; 0x24
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	330c      	adds	r3, #12
 800364e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003650:	623a      	str	r2, [r7, #32]
 8003652:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003654:	69f9      	ldr	r1, [r7, #28]
 8003656:	6a3a      	ldr	r2, [r7, #32]
 8003658:	e841 2300 	strex	r3, r2, [r1]
 800365c:	61bb      	str	r3, [r7, #24]
   return(result);
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1e5      	bne.n	8003630 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	2b10      	cmp	r3, #16
 8003670:	d10a      	bne.n	8003688 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003672:	2300      	movs	r3, #0
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800368c:	4619      	mov	r1, r3
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7ff fdc0 	bl	8003214 <HAL_UARTEx_RxEventCallback>
 8003694:	e002      	b.n	800369c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7fc fd5a 	bl	8000150 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	e002      	b.n	80036a6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	e000      	b.n	80036a6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80036a4:	2302      	movs	r3, #2
  }
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3730      	adds	r7, #48	; 0x30
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689a      	ldr	r2, [r3, #8]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	4313      	orrs	r3, r2
 80036de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80036ea:	f023 030c 	bic.w	r3, r3, #12
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6812      	ldr	r2, [r2, #0]
 80036f2:	68b9      	ldr	r1, [r7, #8]
 80036f4:	430b      	orrs	r3, r1
 80036f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699a      	ldr	r2, [r3, #24]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a2c      	ldr	r2, [pc, #176]	; (80037c4 <UART_SetConfig+0x114>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d103      	bne.n	8003720 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003718:	f7fe fd10 	bl	800213c <HAL_RCC_GetPCLK2Freq>
 800371c:	60f8      	str	r0, [r7, #12]
 800371e:	e002      	b.n	8003726 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003720:	f7fe fcf8 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
 8003724:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4613      	mov	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	009a      	lsls	r2, r3, #2
 8003730:	441a      	add	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	fbb2 f3f3 	udiv	r3, r2, r3
 800373c:	4a22      	ldr	r2, [pc, #136]	; (80037c8 <UART_SetConfig+0x118>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	0119      	lsls	r1, r3, #4
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	009a      	lsls	r2, r3, #2
 8003750:	441a      	add	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	fbb2 f2f3 	udiv	r2, r2, r3
 800375c:	4b1a      	ldr	r3, [pc, #104]	; (80037c8 <UART_SetConfig+0x118>)
 800375e:	fba3 0302 	umull	r0, r3, r3, r2
 8003762:	095b      	lsrs	r3, r3, #5
 8003764:	2064      	movs	r0, #100	; 0x64
 8003766:	fb00 f303 	mul.w	r3, r0, r3
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	3332      	adds	r3, #50	; 0x32
 8003770:	4a15      	ldr	r2, [pc, #84]	; (80037c8 <UART_SetConfig+0x118>)
 8003772:	fba2 2303 	umull	r2, r3, r2, r3
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800377c:	4419      	add	r1, r3
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	009a      	lsls	r2, r3, #2
 8003788:	441a      	add	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	fbb2 f2f3 	udiv	r2, r2, r3
 8003794:	4b0c      	ldr	r3, [pc, #48]	; (80037c8 <UART_SetConfig+0x118>)
 8003796:	fba3 0302 	umull	r0, r3, r3, r2
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	2064      	movs	r0, #100	; 0x64
 800379e:	fb00 f303 	mul.w	r3, r0, r3
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	3332      	adds	r3, #50	; 0x32
 80037a8:	4a07      	ldr	r2, [pc, #28]	; (80037c8 <UART_SetConfig+0x118>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	f003 020f 	and.w	r2, r3, #15
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	440a      	add	r2, r1
 80037ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80037bc:	bf00      	nop
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40013800 	.word	0x40013800
 80037c8:	51eb851f 	.word	0x51eb851f

080037cc <__libc_init_array>:
 80037cc:	b570      	push	{r4, r5, r6, lr}
 80037ce:	2600      	movs	r6, #0
 80037d0:	4d0c      	ldr	r5, [pc, #48]	; (8003804 <__libc_init_array+0x38>)
 80037d2:	4c0d      	ldr	r4, [pc, #52]	; (8003808 <__libc_init_array+0x3c>)
 80037d4:	1b64      	subs	r4, r4, r5
 80037d6:	10a4      	asrs	r4, r4, #2
 80037d8:	42a6      	cmp	r6, r4
 80037da:	d109      	bne.n	80037f0 <__libc_init_array+0x24>
 80037dc:	f000 f822 	bl	8003824 <_init>
 80037e0:	2600      	movs	r6, #0
 80037e2:	4d0a      	ldr	r5, [pc, #40]	; (800380c <__libc_init_array+0x40>)
 80037e4:	4c0a      	ldr	r4, [pc, #40]	; (8003810 <__libc_init_array+0x44>)
 80037e6:	1b64      	subs	r4, r4, r5
 80037e8:	10a4      	asrs	r4, r4, #2
 80037ea:	42a6      	cmp	r6, r4
 80037ec:	d105      	bne.n	80037fa <__libc_init_array+0x2e>
 80037ee:	bd70      	pop	{r4, r5, r6, pc}
 80037f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f4:	4798      	blx	r3
 80037f6:	3601      	adds	r6, #1
 80037f8:	e7ee      	b.n	80037d8 <__libc_init_array+0xc>
 80037fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80037fe:	4798      	blx	r3
 8003800:	3601      	adds	r6, #1
 8003802:	e7f2      	b.n	80037ea <__libc_init_array+0x1e>
 8003804:	08003878 	.word	0x08003878
 8003808:	08003878 	.word	0x08003878
 800380c:	08003878 	.word	0x08003878
 8003810:	0800387c 	.word	0x0800387c

08003814 <memset>:
 8003814:	4603      	mov	r3, r0
 8003816:	4402      	add	r2, r0
 8003818:	4293      	cmp	r3, r2
 800381a:	d100      	bne.n	800381e <memset+0xa>
 800381c:	4770      	bx	lr
 800381e:	f803 1b01 	strb.w	r1, [r3], #1
 8003822:	e7f9      	b.n	8003818 <memset+0x4>

08003824 <_init>:
 8003824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003826:	bf00      	nop
 8003828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800382a:	bc08      	pop	{r3}
 800382c:	469e      	mov	lr, r3
 800382e:	4770      	bx	lr

08003830 <_fini>:
 8003830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003832:	bf00      	nop
 8003834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003836:	bc08      	pop	{r3}
 8003838:	469e      	mov	lr, r3
 800383a:	4770      	bx	lr
